package org.example.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import jakarta.annotation.PostConstruct;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Service
public class MessageCleanupService {

    private static final Logger log = LoggerFactory.getLogger(MessageCleanupService.class);

    private final JdbcTemplate jdbcTemplate;
    private final TelegramService telegramService;

    @Value("${app.channelId:}")
    private String channelId;

    public MessageCleanupService(JdbcTemplate jdbcTemplate, TelegramService telegramService) {
        this.jdbcTemplate = jdbcTemplate;
        this.telegramService = telegramService;
    }

    @PostConstruct
    public void init() {
        createMessagesTableIfNotExists();
        log.info("‚úÖ MessageCleanupService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ö–∞–Ω–∞–ª: {}", channelId);
    }

    private void createMessagesTableIfNotExists() {
        try {
            jdbcTemplate.execute("""
                CREATE TABLE IF NOT EXISTS channel_messages (
                    id BIGSERIAL PRIMARY KEY,
                    message_id INTEGER NOT NULL,
                    lesson_type VARCHAR(20) NOT NULL,
                    lesson_date DATE NOT NULL,
                    message_text TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(message_id, lesson_type, lesson_date)
                )
            """);
            log.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ channel_messages —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã channel_messages", e);
        }
    }

    public void saveMessageId(Integer messageId, String lessonType, LocalDate lessonDate, String messageText) {
        try {
            jdbcTemplate.update("""
                INSERT INTO channel_messages (message_id, lesson_type, lesson_date, message_text) 
                VALUES (?, ?, ?, ?)
                ON CONFLICT (message_id, lesson_type, lesson_date) DO UPDATE SET
                    message_text = EXCLUDED.message_text,
                    created_at = CURRENT_TIMESTAMP
            """, messageId, lessonType, lessonDate, messageText);
            log.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è: {} –¥–ª—è {} –∑–∞–Ω—è—Ç–∏—è –Ω–∞ {} (—Ç–µ–∫—Å—Ç: {})",
                    messageId, lessonType, lessonDate,
                    messageText != null ? messageText.substring(0, Math.min(50, messageText.length())) + "..." : "null");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    // üîß –¢–ï–°–¢–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–£–ß–ù–û–ì–û –ó–ê–ü–£–°–ö–ê

    public void testMorningDeletion() {
        log.info("üß™ –†–£–ß–ù–û–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
        deleteTodayMorningMessages();
    }

    public void testEveningDeletion() {
        log.info("üß™ –†–£–ß–ù–û–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
        deleteTodayEveningMessages();
    }

    public void testNoClassesDeletion() {
        log.info("üß™ –†–£–ß–ù–û–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π");
        deleteTomorrowNoClassesMessages();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Ç–±–∏–≤–∫–∏ –≤ 8:00 —É—Ç—Ä–∞ –≤ –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è (—Å–ø—É—Å—Ç—è 16 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–±–∏–≤–∫–∏ –≤ 16:00)
    @Scheduled(cron = "0 0 8 * * ?", zone = "Europe/Moscow")
    public void deleteTodayMorningMessages() {
        log.info("üîÑ –ó–ê–ü–£–°–ö deleteTodayMorningMessages –≤ {}", LocalDateTime.now());

        if (channelId == null || channelId.isEmpty()) {
            log.error("‚ùå Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", channelId);
            return;
        }

        // –£–¥–∞–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –°–ï–ì–û–î–ù–Ø–®–ù–ò–ô –¥–µ–Ω—å
        LocalDate targetDate = LocalDate.now();
        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({}) –≤ 8:00 –ú–°–ö", targetDate);
        deleteMessagesForDateAndType(targetDate, "morning");
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–π –æ—Ç–±–∏–≤–∫–∏ –≤ 19:00 –≤–µ—á–µ—Ä–∞ –≤ –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è (—Å–ø—É—Å—Ç—è 27 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–±–∏–≤–∫–∏ –≤ 16:01)
    @Scheduled(cron = "0 0 19 * * ?", zone = "Europe/Moscow")
    public void deleteTodayEveningMessages() {
        log.info("üîÑ –ó–ê–ü–£–°–ö deleteTodayEveningMessages –≤ {}", LocalDateTime.now());

        if (channelId == null || channelId.isEmpty()) {
            log.error("‚ùå Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", channelId);
            return;
        }

        // –£–¥–∞–ª—è–µ–º –≤–µ—á–µ—Ä–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –°–ï–ì–û–î–ù–Ø–®–ù–ò–ô –¥–µ–Ω—å
        LocalDate targetDate = LocalDate.now();
        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({}) –≤ 19:00 –ú–°–ö", targetDate);
        deleteMessagesForDateAndType(targetDate, "evening");
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–±–∏–≤–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π –≤ 15:55 –°–õ–ï–î–£–Æ–©–ï–ì–û –¥–Ω—è
    @Scheduled(cron = "0 55 15 * * ?", zone = "Europe/Moscow")
    public void deleteTomorrowNoClassesMessages() {
        log.info("üîÑ –ó–ê–ü–£–°–ö deleteTomorrowNoClassesMessages –≤ {}", LocalDateTime.now());

        if (channelId == null || channelId.isEmpty()) {
            log.error("‚ùå Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", channelId);
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –ó–ê–í–¢–†–ê–®–ù–ò–ô –¥–µ–Ω—å
        LocalDate targetDate = LocalDate.now().plusDays(1);
        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({}) –≤ 15:55 –ú–°–ö", targetDate);
        deleteMessagesForDateAndType(targetDate, "no_classes");
    }

    public void deleteMessagesForDateAndType(LocalDate date, String lessonType) {
        try {
            log.info("üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: date={}, type={}", date, lessonType);

            List<Map<String, Object>> messages = jdbcTemplate.queryForList("""
                SELECT message_id, message_text FROM channel_messages 
                WHERE lesson_date = ? AND lesson_type = ?
            """, date, lessonType);

            log.info("üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {} –¥–ª—è {} {}", messages.size(), date, lessonType);

            if (messages.isEmpty()) {
                log.info("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {} {}", date, lessonType);
                return;
            }

            int deletedCount = 0;
            for (Map<String, Object> message : messages) {
                Integer messageId = (Integer) message.get("message_id");
                String messageText = (String) message.get("message_text");

                log.info("üîç –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {}: {}", messageId,
                        messageText != null ? messageText.substring(0, Math.min(100, messageText.length())) : "null");

                if (deleteMessageFromChannel(messageId)) {
                    deletedCount++;
                    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                    jdbcTemplate.update("DELETE FROM channel_messages WHERE message_id = ? AND lesson_date = ? AND lesson_type = ?",
                            messageId, date, lessonType);
                    log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î", messageId);
                }
            }

            log.info("‚úÖ –£–¥–∞–ª–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {} –¥–ª—è {} {}", deletedCount, messages.size(), date, lessonType);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {} {}", date, lessonType, e);
        }
    }

    private boolean deleteMessageFromChannel(Integer messageId) {
        try {
            log.info("üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {} –∏–∑ –∫–∞–Ω–∞–ª–∞ {}", messageId, channelId);
            boolean result = telegramService.deleteMessageFromChannel(messageId);

            if (result) {
                log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞", messageId);
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {} –∏–∑ –∫–∞–Ω–∞–ª–∞", messageId);
            }

            return result;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {}: {}", messageId, e.getMessage());
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    @Scheduled(cron = "0 0 2 * * ?", zone = "Europe/Moscow")
    public void cleanupOldRecords() {
        try {
            LocalDate weekAgo = LocalDate.now().minusDays(7);
            int deleted = jdbcTemplate.update("DELETE FROM channel_messages WHERE lesson_date < ?", weekAgo);
            if (deleted > 0) {
                log.info("üßπ –û—á–∏—â–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ {})", deleted, weekAgo);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π", e);
        }
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    @Scheduled(fixedRate = 300000) // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    public void debugScheduledTasks() {
        LocalDateTime now = LocalDateTime.now();
        log.info("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {}, –°–µ–≥–æ–¥–Ω—è: {}, –ó–∞–≤—Ç—Ä–∞: {}",
                now.format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")),
                LocalDate.now(),
                LocalDate.now().plusDays(1));

        try {
            List<Map<String, Object>> messages = jdbcTemplate.queryForList(
                    "SELECT message_id, lesson_type, lesson_date, created_at FROM channel_messages ORDER BY lesson_date DESC, lesson_type LIMIT 5");
            log.info("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {}", messages);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", e);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    public void deleteAllMessagesForDate(LocalDate date) {
        log.info("üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–∞—Ç—É: {}", date);
        deleteMessagesForDateAndType(date, "morning");
        deleteMessagesForDateAndType(date, "evening");
        deleteMessagesForDateAndType(date, "no_classes");
    }
}