package org.example.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import jakarta.annotation.PostConstruct;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Service
public class MessageCleanupService {

    private static final Logger log = LoggerFactory.getLogger(MessageCleanupService.class);

    private final JdbcTemplate jdbcTemplate;
    private final TelegramWebhookBot telegramBot;

    @Value("${app.channelId:}")
    private String channelId;

    public MessageCleanupService(JdbcTemplate jdbcTemplate, TelegramWebhookBot telegramBot) {
        this.jdbcTemplate = jdbcTemplate;
        this.telegramBot = telegramBot;
    }

    @PostConstruct
    public void init() {
        createMessagesTableIfNotExists();
    }

    private void createMessagesTableIfNotExists() {
        try {
            jdbcTemplate.execute("""
                CREATE TABLE IF NOT EXISTS channel_messages (
                    id BIGSERIAL PRIMARY KEY,
                    message_id INTEGER NOT NULL,
                    lesson_type VARCHAR(10) NOT NULL,
                    lesson_date DATE NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(message_id, lesson_type, lesson_date)
                )
            """);
            log.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ channel_messages —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã channel_messages", e);
        }
    }

    public void saveMessageId(Integer messageId, String lessonType, LocalDate lessonDate) {
        try {
            jdbcTemplate.update("""
                INSERT INTO channel_messages (message_id, lesson_type, lesson_date) 
                VALUES (?, ?, ?)
                ON CONFLICT (message_id, lesson_type, lesson_date) DO NOTHING
            """, messageId, lessonType, lessonDate);
            log.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è: {} –¥–ª—è {} –∑–∞–Ω—è—Ç–∏—è –Ω–∞ {}", messageId, lessonType, lessonDate);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
    }

    // üîß –¢–ï–°–¢–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–£–ß–ù–û–ì–û –ó–ê–ü–£–°–ö–ê

    public void testMorningDeletion() {
        log.info("üß™ –†–£–ß–ù–û–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
        deleteYesterdayMorningMessages();
    }

    public void testEveningDeletion() {
        log.info("üß™ –†–£–ß–ù–û–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π");
        deleteYesterdayEveningMessages();
    }

    public void testNoClassesDeletion() {
        log.info("üß™ –†–£–ß–ù–û–ô –¢–ï–°–¢: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π");
        deleteYesterdayNoClassesMessages();
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—á–µ—Ä–∞—à–Ω–µ–π —É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Ç–±–∏–≤–∫–∏ –≤ 8:00 –ú–°–ö
    @Scheduled(cron = "0 0 8 * * ?")
    public void deleteYesterdayMorningMessages() {
        log.info("üîÑ –ó–ê–ü–£–°–ö deleteYesterdayMorningMessages –≤ {}", LocalDateTime.now());

        if (channelId == null || channelId.isEmpty()) {
            log.error("‚ùå Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", channelId);
            return;
        }

        LocalDate yesterday = LocalDate.now().minusDays(1);
        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞ ({}) –≤ 8:00 –ú–°–ö", yesterday);
        deleteMessagesForDateAndType(yesterday, "morning");
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—á–µ—Ä–∞—à–Ω–µ–π –≤–µ—á–µ—Ä–Ω–µ–π –æ—Ç–±–∏–≤–∫–∏ –≤ 16:00 –ú–°–ö
    @Scheduled(cron = "0 0 16 * * ?")
    public void deleteYesterdayEveningMessages() {
        log.info("üîÑ –ó–ê–ü–£–°–ö deleteYesterdayEveningMessages –≤ {}", LocalDateTime.now());

        if (channelId == null || channelId.isEmpty()) {
            log.error("‚ùå Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", channelId);
            return;
        }

        LocalDate yesterday = LocalDate.now().minusDays(1);
        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞ ({}) –≤ 16:00 –ú–°–ö", yesterday);
        deleteMessagesForDateAndType(yesterday, "evening");
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –≤—á–µ—Ä–∞—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π –≤ 17:00 –ú–°–ö
    @Scheduled(cron = "0 0 17 * * ?")
    public void deleteYesterdayNoClassesMessages() {
        log.info("üîÑ –ó–ê–ü–£–°–ö deleteYesterdayNoClassesMessages –≤ {}", LocalDateTime.now());

        if (channelId == null || channelId.isEmpty()) {
            log.error("‚ùå Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}", channelId);
            return;
        }

        LocalDate yesterday = LocalDate.now().minusDays(1);
        log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π –∑–∞ –≤—á–µ—Ä–∞ ({}) –≤ 17:00 –ú–°–ö", yesterday);
        deleteMessagesForDateAndType(yesterday, "no_classes");
    }

    public void deleteMessagesForDateAndType(LocalDate date, String lessonType) {
        try {
            log.info("üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: date={}, type={}", date, lessonType);

            List<Map<String, Object>> messages = jdbcTemplate.queryForList("""
                SELECT message_id FROM channel_messages 
                WHERE lesson_date = ? AND lesson_type = ?
            """, date, lessonType);

            log.info("üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {} –¥–ª—è {} {}", messages.size(), date, lessonType);

            if (messages.isEmpty()) {
                log.info("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {} {}", date, lessonType);
                return;
            }

            int deletedCount = 0;
            for (Map<String, Object> message : messages) {
                Integer messageId = (Integer) message.get("message_id");
                if (deleteMessageFromChannel(messageId)) {
                    deletedCount++;
                    jdbcTemplate.update("DELETE FROM channel_messages WHERE message_id = ? AND lesson_date = ? AND lesson_type = ?",
                            messageId, date, lessonType);
                }
            }

            log.info("‚úÖ –£–¥–∞–ª–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {} –¥–ª—è {} {}", deletedCount, messages.size(), date, lessonType);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {} {}", date, lessonType, e);
        }
    }

    private boolean deleteMessageFromChannel(Integer messageId) {
        try {
            DeleteMessage deleteMessage = new DeleteMessage(channelId, messageId);
            boolean result = telegramBot.execute(deleteMessage);

            if (result) {
                log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞", messageId);
            } else {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {} –∏–∑ –∫–∞–Ω–∞–ª–∞", messageId);
            }

            return result;
        } catch (TelegramApiException e) {
            if (e.getMessage().contains("message to delete not found")) {
                log.info("‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞", messageId);
                return true;
            }
            log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {}: {}", messageId, e.getMessage());
            return false;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    @Scheduled(cron = "0 0 2 * * ?")
    public void cleanupOldRecords() {
        try {
            LocalDate weekAgo = LocalDate.now().minusDays(7);
            int deleted = jdbcTemplate.update("DELETE FROM channel_messages WHERE lesson_date < ?", weekAgo);
            if (deleted > 0) {
                log.info("üßπ –û—á–∏—â–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ {})", deleted, weekAgo);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π", e);
        }
    }
}