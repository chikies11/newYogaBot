package org.example.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import jakarta.annotation.PostConstruct;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class DatabaseService {

    private static final Logger log = LoggerFactory.getLogger(DatabaseService.class);

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @PostConstruct
    public void init() {
        log.info("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å connection pooling...");
        initializeDatabase();
    }

    private void initializeDatabase() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            jdbcTemplate.execute("SELECT 1");

            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            createTablesIfNotExists();

            log.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å connection pooling");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", e);
        }
    }

    @Transactional
    public void logAdminAction(Long adminId, String action, String details) {
        try {
            jdbcTemplate.update("""
                CREATE TABLE IF NOT EXISTS admin_actions (
                    id BIGSERIAL PRIMARY KEY,
                    admin_id BIGINT NOT NULL,
                    action VARCHAR(100) NOT NULL,
                    details TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);

            jdbcTemplate.update("""
                INSERT INTO admin_actions (admin_id, action, details) 
                VALUES (?, ?, ?)
            """, adminId, action, details);

            log.info("üë®‚Äçüíº –î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞ {}: {} - {}", adminId, action, details);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞", e);
        }
    }

    private void createTablesIfNotExists() {
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            try {
                jdbcTemplate.execute("DROP TABLE IF EXISTS lessons");
                log.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ lessons");
            } catch (Exception e) {
                log.info("‚ÑπÔ∏è –°—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã lessons –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞");
            }

            // –°–û–ó–î–ê–ï–ú –¢–ê–ë–õ–ò–¶–£ –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–û–ô
            jdbcTemplate.execute("""
            CREATE TABLE IF NOT EXISTS lessons (
                id BIGSERIAL PRIMARY KEY,
                day_of_week VARCHAR(20) NOT NULL,
                lesson_type VARCHAR(10) NOT NULL,
                description TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(day_of_week, lesson_type)
            )
        """);

            jdbcTemplate.execute("""
                CREATE TABLE IF NOT EXISTS registrations (
                    id BIGSERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    username VARCHAR(255),
                    display_name VARCHAR(255) NOT NULL,
                    lesson_date DATE NOT NULL,
                    lesson_type VARCHAR(10) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, lesson_date, lesson_type)
                )
            """);

            jdbcTemplate.execute("""
                CREATE TABLE IF NOT EXISTS bot_settings (
                    id INTEGER PRIMARY KEY,
                    notifications_enabled BOOLEAN DEFAULT true,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            jdbcTemplate.update("""
                INSERT INTO bot_settings (id, notifications_enabled) 
                VALUES (1, true) 
                ON CONFLICT (id) DO NOTHING
            """);

            log.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü", e);
        }
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===

    @Transactional
    public void saveSchedule(DayOfWeek dayOfWeek, String lessonType, String description, Long adminId) {
        try {
            String oldDescription = null;
            try {
                oldDescription = jdbcTemplate.queryForObject(
                        "SELECT description FROM lessons WHERE day_of_week = ? AND lesson_type = ?",
                        String.class, dayOfWeek.toString(), lessonType);
            } catch (EmptyResultDataAccessException e) {
                // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º oldDescription = null
                oldDescription = null;
            }

            jdbcTemplate.update("""
                INSERT INTO lessons (day_of_week, lesson_type, description) 
                VALUES (?, ?, ?)
                ON CONFLICT (day_of_week, lesson_type) 
                DO UPDATE SET description = ?, updated_at = CURRENT_TIMESTAMP
            """, dayOfWeek.toString(), lessonType, description, description);

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
            String action = "CHANGE_SCHEDULE";
            String details = String.format("–î–µ–Ω—å: %s, –í—Ä–µ–º—è: %s, –ë—ã–ª–æ: %s, –°—Ç–∞–ª–æ: %s",
                    dayOfWeek, lessonType, oldDescription != null ? oldDescription : "–ø—É—Å—Ç–æ", description);

            logAdminAction(adminId, action, details);

            log.info("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {}: {} {} - {}", adminId, dayOfWeek, lessonType, description);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", e);
        }
    }

    public Map<DayOfWeek, Map<String, String>> loadSchedule() {
        Map<DayOfWeek, Map<String, String>> schedule = new HashMap<>();

        try {
            // –ü—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç - –≤–µ—Ä–Ω–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            jdbcTemplate.query("SELECT day_of_week, lesson_type, description FROM lessons",
                    rs -> {
                        while (rs.next()) {
                            try {
                                DayOfWeek dayOfWeek = DayOfWeek.valueOf(rs.getString("day_of_week"));
                                String lessonType = rs.getString("lesson_type");
                                String description = rs.getString("description");

                                schedule.computeIfAbsent(dayOfWeek, k -> new HashMap<>())
                                        .put(lessonType, description);
                            } catch (IllegalArgumentException e) {
                                log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –ë–î: {}", rs.getString("day_of_week"));
                            }
                        }
                        return null;
                    });

            jdbcTemplate.query("SELECT day_of_week, lesson_type, description FROM lessons",
                    rs -> {
                        while (rs.next()) {
                            try {
                                DayOfWeek dayOfWeek = DayOfWeek.valueOf(rs.getString("day_of_week"));
                                String lessonType = rs.getString("lesson_type");
                                String description = rs.getString("description");

                                schedule.computeIfAbsent(dayOfWeek, k -> new HashMap<>())
                                        .put(lessonType, description);
                            } catch (IllegalArgumentException e) {
                                log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –ë–î: {}", rs.getString("day_of_week"));
                            }
                        }
                        return null;
                    });

            log.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î: {} –∑–∞–ø–∏—Å–µ–π", schedule.size());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", e);
        }

        return schedule;
    }

    public List<Map<String, Object>> getAdminLogs(int limit) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            jdbcTemplate.execute("""
                CREATE TABLE IF NOT EXISTS admin_actions (
                    id BIGSERIAL PRIMARY KEY,
                    admin_id BIGINT NOT NULL,
                    action VARCHAR(100) NOT NULL,
                    details TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);

            return jdbcTemplate.queryForList("""
                SELECT admin_id, action, details, created_at 
                FROM admin_actions 
                ORDER BY created_at DESC 
                LIMIT ?
            """, limit);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∞", e);
            return new ArrayList<>();
        }
    }

    public void initializeDefaultSchedule() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏
            Integer count = null;
            try {
                count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM lessons", Integer.class);
                log.info("‚úÖ –í –ë–î –Ω–∞–π–¥–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", count);
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ lessons –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...");
                createTablesIfNotExists();
                count = 0;
            }

            if (count != null && count > 0) {
                log.info("‚úÖ –í –ë–î —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é");
                return;
            }

            log.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î...");

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            Map<DayOfWeek, Map<String, String>> defaultSchedule = createDefaultSchedule();

            for (Map.Entry<DayOfWeek, Map<String, String>> dayEntry : defaultSchedule.entrySet()) {
                DayOfWeek dayOfWeek = dayEntry.getKey();
                Map<String, String> lessons = dayEntry.getValue();

                for (Map.Entry<String, String> lessonEntry : lessons.entrySet()) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π adminId = 0 –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    saveSchedule(dayOfWeek, lessonEntry.getKey(), lessonEntry.getValue(), 0L);
                }
            }

            log.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î");

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", e);
        }
    }

    private Map<DayOfWeek, Map<String, String>> createDefaultSchedule() {
        Map<DayOfWeek, Map<String, String>> schedule = new HashMap<>();

        // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        Map<String, String> monday = new HashMap<>();
        monday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        monday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        schedule.put(DayOfWeek.MONDAY, monday);

        // –í—Ç–æ—Ä–Ω–∏–∫
        Map<String, String> tuesday = new HashMap<>();
        tuesday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        tuesday.put("evening", "–û—Ç–¥—ã—Ö");
        schedule.put(DayOfWeek.TUESDAY, tuesday);

        // –°—Ä–µ–¥–∞
        Map<String, String> wednesday = new HashMap<>();
        wednesday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        wednesday.put("evening", "18:30 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        schedule.put(DayOfWeek.WEDNESDAY, wednesday);

        // –ß–µ—Ç–≤–µ—Ä–≥
        Map<String, String> thursday = new HashMap<>();
        thursday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        thursday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        schedule.put(DayOfWeek.THURSDAY, thursday);

        // –ü—è—Ç–Ω–∏—Ü–∞
        Map<String, String> friday = new HashMap<>();
        friday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        friday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        schedule.put(DayOfWeek.FRIDAY, friday);

        // –°—É–±–±–æ—Ç–∞
        Map<String, String> saturday = new HashMap<>();
        saturday.put("morning", "–û–¢–î–´–•");
        saturday.put("evening", "–û–¢–î–´–•");
        schedule.put(DayOfWeek.SATURDAY, saturday);

        // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        Map<String, String> sunday = new HashMap<>();
        sunday.put("morning", "10:00 - 11:30 LED-–ö–õ–ê–°–°\n11:30 - 12:00 –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)");
        sunday.put("evening", "–û—Ç–¥—ã—Ö");
        schedule.put(DayOfWeek.SUNDAY, sunday);

        return schedule;
    }

    // === –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===

    public boolean areNotificationsEnabled() {
        try {
            Boolean enabled = jdbcTemplate.queryForObject(
                    "SELECT notifications_enabled FROM bot_settings WHERE id = 1",
                    Boolean.class
            );
            return enabled != null && enabled;
        } catch (EmptyResultDataAccessException e) {
            return true; // default value
        }
    }

    @Transactional
    public boolean toggleNotifications() {
        boolean currentState = areNotificationsEnabled();
        boolean newState = !currentState;

        jdbcTemplate.update("""
            INSERT INTO bot_settings (id, notifications_enabled) 
            VALUES (1, ?) 
            ON CONFLICT (id) DO UPDATE SET notifications_enabled = ?
        """, newState, newState);

        return newState;
    }

    @Transactional
    public boolean registerUser(Long userId, String username, String displayName,
                                LocalDate lessonDate, String lessonType) {
        try {
            int rows = jdbcTemplate.update("""
                INSERT INTO registrations (user_id, username, display_name, lesson_date, lesson_type) 
                VALUES (?, ?, ?, ?, ?)
                ON CONFLICT (user_id, lesson_date, lesson_type) DO NOTHING
            """, userId, username, displayName, lessonDate, lessonType);

            return rows > 0;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e);
            return false;
        }
    }

    @Transactional
    public boolean cancelRegistration(Long userId, LocalDate lessonDate, String lessonType) {
        try {
            int rows = jdbcTemplate.update("""
                DELETE FROM registrations 
                WHERE user_id = ? AND lesson_date = ? AND lesson_type = ?
            """, userId, lessonDate, lessonType);

            return rows > 0;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", e);
            return false;
        }
    }

    public boolean isUserRegistered(Long userId, LocalDate lessonDate, String lessonType) {
        try {
            Integer count = jdbcTemplate.queryForObject("""
                SELECT COUNT(*) FROM registrations 
                WHERE user_id = ? AND lesson_date = ? AND lesson_type = ?
            """, Integer.class, userId, lessonDate, lessonType);

            return count != null && count > 0;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", e);
            return false;
        }
    }

    public Map<String, List<String>> getRegistrationsForDate(LocalDate date) {
        try {
            return jdbcTemplate.query("""
                SELECT lesson_type, display_name 
                FROM registrations 
                WHERE lesson_date = ? 
                ORDER BY lesson_type, created_at
            """, new Object[]{date}, rs -> {
                Map<String, List<String>> registrations = new HashMap<>();
                registrations.put("morning", new ArrayList<>());
                registrations.put("evening", new ArrayList<>());

                while (rs.next()) {
                    String lessonType = rs.getString("lesson_type");
                    String displayName = rs.getString("display_name");
                    if (registrations.containsKey(lessonType)) {
                        registrations.get(lessonType).add(displayName);
                    }
                }

                return registrations;
            });
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–∞—Ç—É: {}", date, e);
            Map<String, List<String>> emptyResult = new HashMap<>();
            emptyResult.put("morning", new ArrayList<>());
            emptyResult.put("evening", new ArrayList<>());
            return emptyResult;
        }
    }

    public int getRegistrationCount(LocalDate date, String lessonType) {
        try {
            Integer count = jdbcTemplate.queryForObject("""
                SELECT COUNT(*) FROM registrations 
                WHERE lesson_date = ? AND lesson_type = ?
            """, Integer.class, date, lessonType);

            return count != null ? count : 0;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π", e);
            return 0;
        }
    }
}