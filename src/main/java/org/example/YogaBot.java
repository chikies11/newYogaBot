package org.example;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.util.HashMap;
import java.util.Map;

@Component
public class YogaBot extends TelegramWebhookBot {

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    @Value("${BOT_PATH:/}")
    private String botPath;

    @Value("${spring.datasource.url}")
    private String dbUrl;

    @Value("${app.channelId}")
    private String channelId;

    @Value("${app.adminId}")
    private String adminId;

    // –ü–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–∞–º—è—Ç–∏
    private final Map<Long, Boolean> subscriptions = new HashMap<>();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ Spring —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–ª—è
    @PostConstruct
    public void postConstruct() {
        initDb();
    }

    @Override
    public String getBotUsername() { return botUsername; }

    @Override
    public String getBotToken() { return botToken; }

    @Override
    public String getBotPath() { return botPath; }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();
            Long userId = update.getMessage().getFrom().getId();

            switch (text) {
                case "/start" -> sendMsg(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø YogaBot üßò");
                case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" -> toggleSubscription(chatId, userId);
                case "üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" -> showSchedule(chatId);
                default -> sendMsg(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞");
            }
        }
        return null; // null, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä–µ–∫—Ç BotApiMethod
    }

    /** –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */
    private void sendMsg(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö */
    private void initDb() {
        try (Connection conn = DriverManager.getConnection(dbUrl)) {
            Statement st = conn.createStatement();
            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS lessons (
                    id BIGSERIAL PRIMARY KEY,
                    datetime TIMESTAMP NOT NULL,
                    title TEXT NOT NULL
                )
            """);
            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS signups (
                    id BIGSERIAL PRIMARY KEY,
                    lesson_id BIGINT REFERENCES lessons(id) ON DELETE CASCADE,
                    username TEXT NOT NULL
                )
            """);
            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id BIGSERIAL PRIMARY KEY,
                    user_id BIGINT UNIQUE NOT NULL
                )
            """);
            System.out.println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /** –ü–æ–¥–ø–∏—Å–∫–∞ / –æ—Ç–ø–∏—Å–∫–∞ */
    private void toggleSubscription(Long chatId, Long userId) {
        boolean subscribed = subscriptions.getOrDefault(userId, false);
        subscriptions.put(userId, !subscribed);
        sendMsg(chatId, subscribed ? "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã" : "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã");
    }

    /** –ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */
    private void showSchedule(Long chatId) {
        try (Connection conn = DriverManager.getConnection(dbUrl)) {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT id, datetime, title FROM lessons ORDER BY datetime");
            StringBuilder sb = new StringBuilder("üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n");
            while (rs.next()) {
                sb.append("‚Ä¢ ")
                        .append(rs.getTimestamp("datetime").toLocalDateTime())
                        .append(" ‚Äî ")
                        .append(rs.getString("title"))
                        .append("\n");
            }
            sendMsg(chatId, sb.toString());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ */
    private boolean isAdmin(Long userId) {
        return adminId != null && adminId.equals(userId.toString());
    }
}