package org.example;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.sql.Date;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Component
public class YogaBot extends TelegramWebhookBot {

    @Value("${bot.username:}")
    private String botUsername;

    @Value("${bot.token:}")
    private String botToken;

    @Value("${bot.path:}")
    private String botPath;

    @Value("${spring.datasource.url:}")
    private String dbUrl;

    @Value("${spring.datasource.username:}")
    private String dbUsername;

    @Value("${spring.datasource.password:}")
    private String dbPassword;

    @Value("${app.channelId:}")
    private String channelId;

    @Value("${app.adminId:}")
    private String adminId;

    private final Map<Long, String> userStates = new HashMap<>();
    private final Map<DayOfWeek, Map<String, String>> fixedSchedule = new HashMap<>();

    @PostConstruct
    public void postConstruct() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YogaBot...");
        System.out.println("Admin ID: " + adminId);
        System.out.println("Channel ID: " + channelId);

        initializeFixedSchedule();

        if (dbUrl != null && !dbUrl.isEmpty() && dbUsername != null && dbPassword != null) {
            initDb();
        } else {
            System.out.println("‚ö†Ô∏è Database –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î");
        }
        System.out.println("‚úÖ YogaBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    private void initializeFixedSchedule() {
        // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        Map<String, String> monday = new HashMap<>();
        monday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        monday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.MONDAY, monday);

        // –í—Ç–æ—Ä–Ω–∏–∫
        Map<String, String> tuesday = new HashMap<>();
        tuesday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        tuesday.put("evening", "–û—Ç–¥—ã—Ö");
        fixedSchedule.put(DayOfWeek.TUESDAY, tuesday);

        // –°—Ä–µ–¥–∞
        Map<String, String> wednesday = new HashMap<>();
        wednesday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        wednesday.put("evening", "18:30 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.WEDNESDAY, wednesday);

        // –ß–µ—Ç–≤–µ—Ä–≥
        Map<String, String> thursday = new HashMap<>();
        thursday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        thursday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.THURSDAY, thursday);

        // –ü—è—Ç–Ω–∏—Ü–∞
        Map<String, String> friday = new HashMap<>();
        friday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        friday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.FRIDAY, friday);

        // –°—É–±–±–æ—Ç–∞
        Map<String, String> saturday = new HashMap<>();
        saturday.put("morning", "–û–¢–î–´–•");
        saturday.put("evening", "–û–¢–î–´–•");
        fixedSchedule.put(DayOfWeek.SATURDAY, saturday);

        // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        Map<String, String> sunday = new HashMap<>();
        sunday.put("morning", "10:00 - 11:30 LED-–ö–õ–ê–°–°\n11:30 - 12:00 –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)");
        sunday.put("evening", "–û—Ç–¥—ã—Ö");
        fixedSchedule.put(DayOfWeek.SUNDAY, sunday);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotPath() {
        return botPath != null && !botPath.isEmpty() ? botPath : "/";
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        System.out.println("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + update.getUpdateId());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        Long userId = null;
        if (update.hasMessage()) {
            userId = update.getMessage().getFrom().getId();
        } else if (update.hasCallbackQuery()) {
            userId = update.getCallbackQuery().getFrom().getId();
        }

        if (userId == null || !isAdmin(userId)) {
            System.out.println("‚õî –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userId);
            return null;
        }

        if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage().getChatId(), update.getMessage().getText(), userId);
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }

        System.out.println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + update.getUpdateId());
        return null;
    }

    private void handleMessage(Long chatId, String text, Long userId) {
        System.out.println("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç " + userId + ": " + text);

        switch (text) {
            case "/start" -> showMainMenu(chatId);
            case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" -> showScheduleMenu(chatId);
            case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" -> toggleNotifications(chatId);
            case "üìã –ó–∞–ø–∏—Å—å" -> showRegistrations(chatId);
            case "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" -> sendTestNotificationToAdmin(chatId);
            case "üö´ –û—Ç–º–µ–Ω–∞" -> {
                userStates.remove(userId);
                showMainMenu(chatId);
            }
            default -> handleState(chatId, text, userId);
        }
    }

    private void handleCallbackQuery(org.telegram.telegrambots.meta.api.objects.CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        System.out.println("üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: " + data);

        switch (data) {
            case "schedule_morning" -> showDaySelection(chatId, "morning");
            case "schedule_evening" -> showDaySelection(chatId, "evening");
            case "back_to_schedule" -> showScheduleMenu(chatId);
            case "back_to_main" -> showMainMenu(chatId);
            default -> {
                if (data.startsWith("day_")) {
                    handleDaySelection(chatId, data);
                } else if (data.startsWith("edit_")) {
                    handleEditLesson(chatId, data);
                } else if (data.startsWith("delete_")) {
                    handleDeleteLesson(chatId, data, messageId);
                } else if (data.startsWith("signup_")) {
                    handleUserSignup(callbackQuery);
                } else if (data.startsWith("cancel_")) {
                    handleUserCancel(callbackQuery);
                }
            }
        }
    }

    private void showMainMenu(Long chatId) {
        String text = "üßò *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å YogaBot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:";

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createMainMenuKeyboard());

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞ " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: " + e.getMessage());
        }
    }

    private ReplyKeyboardMarkup createMainMenuKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row1.add("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üìã –ó–∞–ø–∏—Å—å");

        KeyboardRow row3 = new KeyboardRow();
        row3.add("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private void showScheduleMenu(Long chatId) {
        String scheduleText = getWeeklySchedule();
        String text = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n" + scheduleText + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> timeRow = new ArrayList<>();
        timeRow.add(createInlineButton("üåÖ –£—Ç—Ä–æ", "schedule_morning"));
        timeRow.add(createInlineButton("üåá –í–µ—á–µ—Ä", "schedule_evening"));

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ù–∞–∑–∞–¥", "back_to_main"));

        rows.add(timeRow);
        rows.add(backRow);
        markup.setKeyboard(rows);

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
        }
    }

    private String getWeeklySchedule() {
        StringBuilder sb = new StringBuilder();
        LocalDate today = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE (dd.MM)");

        for (int i = 0; i < 7; i++) {
            LocalDate date = today.plusDays(i);
            DayOfWeek dayOfWeek = date.getDayOfWeek();
            String dayName = date.format(formatter);
            dayName = dayName.substring(0, 1).toUpperCase() + dayName.substring(1);

            sb.append("üìÖ *").append(dayName).append("*\n");

            String morningLesson = fixedSchedule.get(dayOfWeek).get("morning");
            String eveningLesson = fixedSchedule.get(dayOfWeek).get("evening");

            sb.append("üåÖ *–£—Ç—Ä–æ:* ").append(morningLesson).append("\n");
            sb.append("üåá *–í–µ—á–µ—Ä:* ").append(eveningLesson).append("\n\n");
        }

        return sb.toString();
    }

    private void showDaySelection(Long chatId, String lessonType) {
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–∏—Ö" : "–≤–µ—á–µ—Ä–Ω–∏—Ö";
        String text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è " + typeText + " –∑–∞–Ω—è—Ç–∏–π:";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        DayOfWeek[] days = {
                DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY,
                DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY
        };

        String[] dayNames = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"};

        for (int i = 0; i < days.length; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            String callbackData = "day_" + days[i] + "_" + lessonType;
            row.add(createInlineButton(dayNames[i], callbackData));
            rows.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ù–∞–∑–∞–¥", "back_to_schedule"));
        rows.add(backRow);

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è: " + e.getMessage());
        }
    }

    private void handleDaySelection(Long chatId, String data) {
        String[] parts = data.split("_");
        DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
        String lessonType = parts[2];

        String dayName = getRussianDayNameFull(dayOfWeek);
        String currentSchedule = fixedSchedule.get(dayOfWeek).get(lessonType);

        String text = "üìÖ *" + dayName + " - " + (lessonType.equals("morning") ? "–£—Ç—Ä–æ" : "–í–µ—á–µ—Ä") + "*\n\n";
        text += "üìù *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n" + currentSchedule + "\n\n";
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> actionRow = new ArrayList<>();
        actionRow.add(createInlineButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "edit_" + dayOfWeek + "_" + lessonType));
        actionRow.add(createInlineButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "delete_" + dayOfWeek + "_" + lessonType));

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ù–∞–∑–∞–¥", "schedule_" + lessonType));

        rows.add(actionRow);
        rows.add(backRow);
        markup.setKeyboard(rows);

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–Ω—è: " + e.getMessage());
        }
    }

    private void handleEditLesson(Long chatId, String data) {
        String[] parts = data.split("_");
        DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
        String lessonType = parts[2];

        String dayName = getRussianDayNameFull(dayOfWeek);
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ" : "–≤–µ—á–µ—Ä–Ω–µ–≥–æ";
        String currentSchedule = fixedSchedule.get(dayOfWeek).get(lessonType);

        userStates.put(chatId, "editing_" + dayOfWeek + "_" + lessonType);

        String text = "‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ " + typeText + " –∑–∞–Ω—è—Ç–∏—è –Ω–∞ " + dayName + "*\n\n";
        text += "üìù *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n" + currentSchedule + "\n\n";
        text += "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n";
        text += "`10:00 - 11:30 - –ê—à—Ç–∞–Ω–≥–∞ –π–æ–≥–∞`\n\n";
        text += "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'üö´ –û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã";

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createCancelKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void handleDeleteLesson(Long chatId, String data, Integer messageId) {
        String[] parts = data.split("_");
        DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
        String lessonType = parts[2];

        String dayName = getRussianDayNameFull(dayOfWeek);
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–µ–µ" : "–≤–µ—á–µ—Ä–Ω–µ–µ";

        fixedSchedule.get(dayOfWeek).put(lessonType, "–û—Ç–¥—ã—Ö");

        String text = "‚úÖ *" + typeText + " –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ " + dayName + " —É–¥–∞–ª–µ–Ω–æ!*\n\n";
        text += "–¢–µ–ø–µ—Ä—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–æ: *–û—Ç–¥—ã—Ö*";

        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId.toString());
        editMessage.setMessageId(messageId);
        editMessage.setText(text);
        editMessage.setParseMode("Markdown");

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        showDaySelection(chatId, lessonType);
    }

    private void handleState(Long chatId, String text, Long userId) {
        String state = userStates.get(userId);

        if (state != null && state.startsWith("editing_")) {
            String[] parts = state.split("_");
            DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
            String lessonType = parts[2];

            updateLessonSchedule(chatId, text, dayOfWeek, lessonType);
            userStates.remove(userId);
        }
    }

    private void updateLessonSchedule(Long chatId, String newSchedule, DayOfWeek dayOfWeek, String lessonType) {
        String dayName = getRussianDayNameFull(dayOfWeek);
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–µ–µ" : "–≤–µ—á–µ—Ä–Ω–µ–µ";

        fixedSchedule.get(dayOfWeek).put(lessonType, newSchedule);

        String text = "‚úÖ *" + typeText + " –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ " + dayName + " –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\n";
        text += "üìù *–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n" + newSchedule + "\n\n";
        text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç—Ä–∞–∑—è—Ç—Å—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∏ –æ–±—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.";

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + e.getMessage());
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        showDaySelection(chatId, lessonType);
    }

    private ReplyKeyboardMarkup createCancelKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("üö´ –û—Ç–º–µ–Ω–∞");

        keyboardMarkup.setKeyboard(List.of(row));
        return keyboardMarkup;
    }

    private String getRussianDayNameFull(DayOfWeek dayOfWeek) {
        switch (dayOfWeek) {
            case MONDAY: return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫";
            case TUESDAY: return "–í—Ç–æ—Ä–Ω–∏–∫";
            case WEDNESDAY: return "–°—Ä–µ–¥–∞";
            case THURSDAY: return "–ß–µ—Ç–≤–µ—Ä–≥";
            case FRIDAY: return "–ü—è—Ç–Ω–∏—Ü–∞";
            case SATURDAY: return "–°—É–±–±–æ—Ç–∞";
            case SUNDAY: return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ";
            default: return "";
        }
    }

    private void toggleNotifications(Long chatId) {
        try (Connection conn = getConnection()) {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT notifications_enabled FROM bot_settings WHERE id = 1");

            boolean currentState = true;
            if (rs.next()) {
                currentState = rs.getBoolean("notifications_enabled");
            }

            PreparedStatement updateStmt = conn.prepareStatement(
                    "INSERT INTO bot_settings (id, notifications_enabled) VALUES (1, ?) ON CONFLICT (id) DO UPDATE SET notifications_enabled = ?"
            );
            boolean newState = !currentState;
            updateStmt.setBoolean(1, newState);
            updateStmt.setBoolean(2, newState);
            updateStmt.executeUpdate();

            String text = newState ?
                    "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!*\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª:\n‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ - –≤ 12:00 –ú–°–ö\n‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ - –≤ 18:00 –ú–°–ö\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–Ω—è—Ç–∏–π - –≤ 14:00 –ú–°–ö" :
                    "üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!*\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª.";

            SendMessage message = new SendMessage(chatId.toString(), text);
            message.setParseMode("Markdown");
            execute(message);

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + e.getMessage());
            sendMsg(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        }
    }

    private void showRegistrations(Long chatId) {
        LocalDate tomorrow = LocalDate.now().plusDays(1);
        StringBuilder sb = new StringBuilder();

        try (Connection conn = getConnection()) {
            PreparedStatement stmt = conn.prepareStatement("""
                SELECT lesson_type, display_name 
                FROM registrations 
                WHERE lesson_date = ? 
                ORDER BY lesson_type, created_at
            """);
            stmt.setDate(1, Date.valueOf(tomorrow));
            ResultSet rs = stmt.executeQuery();

            Map<String, List<String>> registrations = new HashMap<>();
            registrations.put("morning", new ArrayList<>());
            registrations.put("evening", new ArrayList<>());

            while (rs.next()) {
                String lessonType = rs.getString("lesson_type");
                String displayName = rs.getString("display_name");
                registrations.get(lessonType).add(displayName);
            }

            sb.append("üìã *–ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (").append(tomorrow.format(DateTimeFormatter.ofPattern("dd.MM"))).append(")*\n\n");

            sb.append("üåÖ *–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n");
            if (registrations.get("morning").isEmpty()) {
                sb.append("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n");
            } else {
                int counter = 1;
                for (String name : registrations.get("morning")) {
                    sb.append(counter).append(". ").append(name).append("\n");
                    counter++;
                }
                sb.append("\n");
            }

            sb.append("üåá *–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n");
            if (registrations.get("evening").isEmpty()) {
                sb.append("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç");
            } else {
                int counter = 1;
                for (String name : registrations.get("evening")) {
                    sb.append(counter).append(". ").append(name).append("\n");
                    counter++;
                }
            }

            sb.append("\n\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n");
            sb.append("‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ: ").append(registrations.get("morning").size()).append(" —á–µ–ª.\n");
            sb.append("‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ: ").append(registrations.get("evening").size()).append(" —á–µ–ª.\n");
            sb.append("‚Ä¢ –í—Å–µ–≥–æ: ").append(registrations.get("morning").size() + registrations.get("evening").size()).append(" —á–µ–ª.");

        } catch (SQLException e) {
            sb.append("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π");
        }

        sendMsg(chatId, sb.toString());
    }

    public void sendTestNotification() {
        System.out.println("üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");

        LocalDate tomorrow = LocalDate.now().plusDays(1);
        Map<String, String> tomorrowSchedule = getTomorrowSchedule(tomorrow);

        String morningLesson = tomorrowSchedule.get("morning");
        String eveningLesson = tomorrowSchedule.get("evening");

        System.out.println("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:");
        System.out.println("–£—Ç—Ä–æ: " + morningLesson);
        System.out.println("–í–µ—á–µ—Ä: " + eveningLesson);

        System.out.println("üîî –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
        sendMorningNotification(morningLesson);

        try {
            Thread.sleep(2000);
            System.out.println("üîî –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
            sendEveningNotification(eveningLesson);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã!");
    }

    private void sendTestNotificationToAdmin(Long chatId) {
        try {
            sendTestNotification();
            sendMsg(chatId, "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @yoga_yollayo11");
        } catch (Exception e) {
            sendMsg(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + e.getMessage());
        }
    }

    public void sendManualNotification(String type) {
        System.out.println("üîî –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + type);

        LocalDate tomorrow = LocalDate.now().plusDays(1);
        Map<String, String> tomorrowSchedule = getTomorrowSchedule(tomorrow);

        String morningLesson = tomorrowSchedule.get("morning");
        String eveningLesson = tomorrowSchedule.get("evening");

        switch (type) {
            case "morning":
                sendMorningNotification(morningLesson);
                break;
            case "evening":
                sendEveningNotification(eveningLesson);
                break;
            case "no_classes":
                sendNoClassesNotification(morningLesson, eveningLesson);
                break;
            case "all":
                sendTestNotification();
                break;
        }
    }

    private Map<String, String> getTomorrowSchedule(LocalDate tomorrow) {
        Map<String, String> schedule = new HashMap<>();
        DayOfWeek dayOfWeek = tomorrow.getDayOfWeek();

        schedule.put("morning", fixedSchedule.get(dayOfWeek).get("morning"));
        schedule.put("evening", fixedSchedule.get(dayOfWeek).get("evening"));

        return schedule;
    }

    private void sendMorningNotification(String morningLesson) {
        if (morningLesson == null || morningLesson.equals("–û–¢–î–´–•") || morningLesson.equals("–û—Ç–¥—ã—Ö")) {
            sendToChannel("üåÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
            return;
        }

        String text = "üåÖ *–ó–∞–≤—Ç—Ä–∞—à–Ω—è—è —É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n\n" + morningLesson + "\n\n";
        text += "üìç *–ú–µ—Å—Ç–æ:* –°—Ç—É–¥–∏—è –π–æ–≥–∏\n\n";
        text += "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createInlineButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "signup_morning"));
        row.add(createInlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "cancel_morning"));
        markup.setKeyboard(List.of(row));

        sendToChannel(text, markup);
    }

    private void sendEveningNotification(String eveningLesson) {
        if (eveningLesson == null || eveningLesson.equals("–û–¢–î–´–•") || eveningLesson.equals("–û—Ç–¥—ã—Ö")) {
            sendToChannel("üåá –ù–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
            return;
        }

        String text = "üåá *–ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –≤–µ—á–µ—Ä–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n\n" + eveningLesson + "\n\n";
        text += "üìç *–ú–µ—Å—Ç–æ:* –°—Ç—É–¥–∏—è –π–æ–≥–∏\n\n";
        text += "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createInlineButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "signup_evening"));
        row.add(createInlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "cancel_evening"));
        markup.setKeyboard(List.of(row));

        sendToChannel(text, markup);
    }

    private void sendNoClassesNotification(String morningLesson, String eveningLesson) {
        boolean hasMorning = morningLesson != null && !morningLesson.equals("–û–¢–î–´–•") && !morningLesson.equals("–û—Ç–¥—ã—Ö");
        boolean hasEvening = eveningLesson != null && !eveningLesson.equals("–û–¢–î–´–•") && !eveningLesson.equals("–û—Ç–¥—ã—Ö");

        if (!hasMorning && !hasEvening) {
            String text = "–ù–µ –º–æ–≥—É —Å—Ç–æ—è—Ç—å, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç... –ü–æ–π–¥—É –ø–æ–ª–µ–∂—É...)\n\n–£—Ä–∞, –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç! –û—Ç–¥—ã—Ö–∞–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è! üí´";
            sendToChannel(text);
        } else if (!hasMorning) {
            sendToChannel("üåÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
        } else if (!hasEvening) {
            sendToChannel("üåá –ù–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
        }
    }

    public void sendDailyNotifications() {
        System.out.println("üîî –ó–∞–ø—É—Å–∫ sendDailyNotifications...");

        if (channelId == null || channelId.isEmpty()) {
            System.out.println("‚ö†Ô∏è Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: " + channelId);
            return;
        }

        LocalDate tomorrow = LocalDate.now().plusDays(1);
        LocalTime now = LocalTime.now();

        System.out.println("üìÖ –ó–∞–≤—Ç—Ä–∞: " + tomorrow);
        System.out.println("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: " + now);
        System.out.println("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: " + now.plusHours(3));

        try (Connection conn = getConnection()) {
            Statement checkStmt = conn.createStatement();
            ResultSet settingsRs = checkStmt.executeQuery("SELECT notifications_enabled FROM bot_settings WHERE id = 1");

            if (!settingsRs.next() || !settingsRs.getBoolean("notifications_enabled")) {
                System.out.println("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
                return;
            }
            System.out.println("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");

            Map<String, String> tomorrowSchedule = getTomorrowSchedule(tomorrow);

            String morningLesson = tomorrowSchedule.get("morning");
            String eveningLesson = tomorrowSchedule.get("evening");

            System.out.println("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:");
            System.out.println("–£—Ç—Ä–æ: " + morningLesson);
            System.out.println("–í–µ—á–µ—Ä: " + eveningLesson);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            int hour = now.getHour();
            int minute = now.getMinute();

            System.out.println("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: " + hour + ":" + minute);

            if (hour == 9 && minute == 0) { // 12:00 –ú–°–ö
                System.out.println("üåÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
                sendMorningNotification(morningLesson);
            } else if (hour == 15 && minute == 0) { // 18:00 –ú–°–ö
                System.out.println("üåá –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
                sendEveningNotification(eveningLesson);
            } else if (hour == 11 && minute == 0) { // 14:00 –ú–°–ö
                System.out.println("üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–Ω—è—Ç–∏–π...");
                sendNoClassesNotification(morningLesson, eveningLesson);
            } else {
                System.out.println("‚è∞ –ù–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            }

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendToChannel(String text) {
        sendToChannel(text, null);
    }

    private void sendToChannel(String text, InlineKeyboardMarkup markup) {
        if (channelId == null || channelId.isEmpty()) {
            System.out.println("‚ö†Ô∏è Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return;
        }

        SendMessage message = new SendMessage(channelId, text);
        message.setParseMode("Markdown");

        if (markup != null) {
            message.setReplyMarkup(markup);
        }

        try {
            execute(message);
            System.out.println("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª");
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: " + e.getMessage());
        }
    }

    private void handleUserSignup(org.telegram.telegrambots.meta.api.objects.CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long userId = callbackQuery.getFrom().getId();
        String username = callbackQuery.getFrom().getUserName();
        String firstName = callbackQuery.getFrom().getFirstName();

        String displayName = username != null ? "@" + username : firstName;
        String lessonType = data.substring(7);

        LocalDate tomorrow = LocalDate.now().plusDays(1);

        try (Connection conn = getConnection()) {
            PreparedStatement checkStmt = conn.prepareStatement(
                    "SELECT id FROM registrations WHERE user_id = ? AND lesson_date = ? AND lesson_type = ?"
            );
            checkStmt.setLong(1, userId);
            checkStmt.setDate(2, Date.valueOf(tomorrow));
            checkStmt.setString(3, lessonType);
            ResultSet rs = checkStmt.executeQuery();

            if (!rs.next()) {
                PreparedStatement insertStmt = conn.prepareStatement(
                        "INSERT INTO registrations (user_id, username, display_name, lesson_date, lesson_type) VALUES (?, ?, ?, ?, ?)"
                );
                insertStmt.setLong(1, userId);
                insertStmt.setString(2, username);
                insertStmt.setString(3, displayName);
                insertStmt.setDate(4, Date.valueOf(tomorrow));
                insertStmt.setString(5, lessonType);
                insertStmt.executeUpdate();

                String answer = "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ " + (lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω—é—é" : "–≤–µ—á–µ—Ä–Ω—é—é") + " –ø—Ä–∞–∫—Ç–∏–∫—É!";
                answerCallbackQuery(callbackQuery.getId(), answer);
            } else {
                answerCallbackQuery(callbackQuery.getId(), "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            answerCallbackQuery(callbackQuery.getId(), "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏");
        }
    }

    private void handleUserCancel(org.telegram.telegrambots.meta.api.objects.CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long userId = callbackQuery.getFrom().getId();
        String username = callbackQuery.getFrom().getUserName();
        String firstName = callbackQuery.getFrom().getFirstName();

        String displayName = username != null ? "@" + username : firstName;
        String lessonType = data.substring(7);

        LocalDate tomorrow = LocalDate.now().plusDays(1);

        try (Connection conn = getConnection()) {
            PreparedStatement checkStmt = conn.prepareStatement(
                    "SELECT id FROM registrations WHERE user_id = ? AND lesson_date = ? AND lesson_type = ?"
            );
            checkStmt.setLong(1, userId);
            checkStmt.setDate(2, Date.valueOf(tomorrow));
            checkStmt.setString(3, lessonType);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                PreparedStatement deleteStmt = conn.prepareStatement(
                        "DELETE FROM registrations WHERE user_id = ? AND lesson_date = ? AND lesson_type = ?"
                );
                deleteStmt.setLong(1, userId);
                deleteStmt.setDate(2, Date.valueOf(tomorrow));
                deleteStmt.setString(3, lessonType);
                int deletedRows = deleteStmt.executeUpdate();

                if (deletedRows > 0) {
                    String answer = "‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ " + (lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω—é—é" : "–≤–µ—á–µ—Ä–Ω—é—é") + " –ø—Ä–∞–∫—Ç–∏–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞!";
                    answerCallbackQuery(callbackQuery.getId(), answer);
                    System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + displayName + " –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ " + lessonType);
                } else {
                    answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å");
                }
            } else {
                answerCallbackQuery(callbackQuery.getId(), "‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            answerCallbackQuery(callbackQuery.getId(), "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏");
        }
    }

    private void answerCallbackQuery(String callbackQueryId, String text) {
        try {
            org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery answer = new org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQueryId);
            answer.setText(text);
            answer.setShowAlert(false);
            execute(answer);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: " + e.getMessage());
        }
    }

    private void sendMsg(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        try {
            execute(message);
            System.out.println("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private Connection getConnection() throws SQLException {
        System.out.println("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...");
        return DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void initDb() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

        try (Connection conn = getConnection()) {
            Statement st = conn.createStatement();

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS lessons (
                    id BIGSERIAL PRIMARY KEY,
                    lesson_date DATE NOT NULL,
                    lesson_type VARCHAR(10) NOT NULL,
                    description TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(lesson_date, lesson_type)
                )
            """);

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS registrations (
                    id BIGSERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    username VARCHAR(255),
                    display_name VARCHAR(255) NOT NULL,
                    lesson_date DATE NOT NULL,
                    lesson_type VARCHAR(10) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, lesson_date, lesson_type)
                )
            """);

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS bot_settings (
                    id INTEGER PRIMARY KEY,
                    notifications_enabled BOOLEAN DEFAULT true,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);

            st.executeUpdate("""
                INSERT INTO bot_settings (id, notifications_enabled) 
                VALUES (1, true) 
                ON CONFLICT (id) DO NOTHING
            """);

            System.out.println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private boolean isAdmin(Long userId) {
        return adminId != null && adminId.equals(userId.toString());
    }

    public void checkServerTime() {
        System.out.println("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC): " + LocalDateTime.now());
        System.out.println("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è Moscow (UTC+3): " + LocalDateTime.now().plusHours(3));
        System.out.println("üïí –¢–µ–∫—É—â–∏–π —á–∞—Å (UTC): " + LocalDateTime.now().getHour());
        System.out.println("üïí –¢–µ–∫—É—â–∏–π —á–∞—Å (Moscow): " + LocalDateTime.now().plusHours(3).getHour());
    }
}