package org.example;

import org.example.service.DatabaseService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Component
public class YogaBot extends TelegramWebhookBot {

    @Value("${bot.username:}")
    private String botUsername;

    @Value("${bot.token:}")
    private String botToken;

    @Value("${bot.path:}")
    private String botPath;

    @Value("${app.channelId:}")
    private String channelId;

    @Value("${app.adminId:}")
    private String adminId;

    private final DatabaseService databaseService;
    private final Map<Long, String> userStates = new HashMap<>();
    private final Map<DayOfWeek, Map<String, String>> fixedSchedule = new HashMap<>();

    public YogaBot(DatabaseService databaseService) {
        this.databaseService = databaseService;
    }

    @PostConstruct
    public void postConstruct() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YogaBot...");
        System.out.println("Admin ID: " + adminId);
        System.out.println("Channel ID: " + channelId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö ID
        if (adminId != null) {
            String[] adminIds = adminId.split(",");
            System.out.println("üë®‚Äçüíº –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã:");
            for (String id : adminIds) {
                System.out.println("   - " + id.trim());
            }
        }

        initializeFixedSchedule();
        System.out.println("‚úÖ YogaBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    private void initializeFixedSchedule() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...");

        // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î
        databaseService.initializeDefaultSchedule();

        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
        Map<DayOfWeek, Map<String, String>> savedSchedule = databaseService.loadSchedule();

        System.out.println("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î: " + (savedSchedule != null ? savedSchedule.size() : "null") + " –¥–Ω–µ–π");

        if (savedSchedule != null && !savedSchedule.isEmpty()) {
            fixedSchedule.putAll(savedSchedule);
            System.out.println("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î: " + savedSchedule.size() + " –¥–Ω–µ–π");

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            for (Map.Entry<DayOfWeek, Map<String, String>> entry : savedSchedule.entrySet()) {
                System.out.println("   - " + entry.getKey() + ": " + entry.getValue());
            }
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            System.out.println("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
            initializeBackupSchedule();
        }

        System.out.println("üìã –ò—Ç–æ–≥–æ–≤—ã–π fixedSchedule: " + fixedSchedule.size() + " –¥–Ω–µ–π");
        System.out.println("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
    }

    private void initializeBackupSchedule() {
        // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        Map<String, String> monday = new HashMap<>();
        monday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        monday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.MONDAY, monday);

        // –í—Ç–æ—Ä–Ω–∏–∫
        Map<String, String> tuesday = new HashMap<>();
        tuesday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        tuesday.put("evening", "–û—Ç–¥—ã—Ö");
        fixedSchedule.put(DayOfWeek.TUESDAY, tuesday);

        // –°—Ä–µ–¥–∞
        Map<String, String> wednesday = new HashMap<>();
        wednesday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        wednesday.put("evening", "18:30 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.WEDNESDAY, wednesday);

        // –ß–µ—Ç–≤–µ—Ä–≥
        Map<String, String> thursday = new HashMap<>();
        thursday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        thursday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.THURSDAY, thursday);

        // –ü—è—Ç–Ω–∏—Ü–∞
        Map<String, String> friday = new HashMap<>();
        friday.put("morning", "8:00 - 11:30 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        friday.put("evening", "17:00 - 20:00 - –ú–∞–π—Å–æ—Ä –∫–ª–∞—Å—Å");
        fixedSchedule.put(DayOfWeek.FRIDAY, friday);

        // –°—É–±–±–æ—Ç–∞
        Map<String, String> saturday = new HashMap<>();
        saturday.put("morning", "–û–¢–î–´–•");
        saturday.put("evening", "–û–¢–î–´–•");
        fixedSchedule.put(DayOfWeek.SATURDAY, saturday);

        // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        Map<String, String> sunday = new HashMap<>();
        sunday.put("morning", "10:00 - 11:30 LED-–ö–õ–ê–°–°\n11:30 - 12:00 –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è (–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)");
        sunday.put("evening", "–û—Ç–¥—ã—Ö");
        fixedSchedule.put(DayOfWeek.SUNDAY, sunday);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotPath() {
        return botPath != null && !botPath.isEmpty() ? botPath : "/";
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        System.out.println("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + update.getUpdateId());

        Long userId = null;
        if (update.hasMessage()) {
            userId = update.getMessage().getFrom().getId();
        } else if (update.hasCallbackQuery()) {
            userId = update.getCallbackQuery().getFrom().getId();
        }

        if (userId == null) {
            System.out.println("‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞
        boolean isAdminUser = isAdmin(userId);
        System.out.println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º: " + isAdminUser);

        if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage().getChatId(), update.getMessage().getText(), userId, isAdminUser);
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery(), isAdminUser);
        }

        System.out.println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + update.getUpdateId());
        return null;
    }

    private void handleMessage(Long chatId, String text, Long userId, boolean isAdminUser) {
        System.out.println("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç " + userId + " (admin: " + isAdminUser + "): " + text);

        // –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        switch (text) {
            case "/start" -> {
                System.out.println("üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId + " (admin: " + isAdminUser + ")");
                showMainMenu(chatId, isAdminUser);
            }
            case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" -> {
                System.out.println("üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (admin: " + isAdminUser + ")");
                if (isAdminUser) {
                    System.out.println("üë®‚Äçüíº –≠—Ç–æ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º");
                    showScheduleMenu(chatId);
                } else {
                    System.out.println("üë§ –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
                    showScheduleForUsers(chatId);
                }
            }
            case "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏" -> showUserRegistrations(chatId, userId);
            case "üïí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è" -> checkAndSendTime(chatId);
            default -> {
                if (isAdminUser) {
                    System.out.println("üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞: " + text);
                    handleAdminMessage(chatId, text, userId);
                } else {
                    sendMsg(chatId, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.");
                }
            }
        }
    }

    private void checkAndSendTime(Long chatId) {
        checkServerTime();

        Instant now = Instant.now();
        LocalDateTime utcTime = LocalDateTime.ofInstant(now, ZoneOffset.UTC);
        LocalDateTime moscowTime = LocalDateTime.ofInstant(now, ZoneId.of("Europe/Moscow"));

        String timeInfo = "üïí *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏:*\n\n" +
                "–°–µ—Ä–≤–µ—Ä (UTC): " + utcTime + "\n" +
                "–ú–æ—Å–∫–≤–∞ (UTC+3): " + moscowTime + "\n" +
                "–ß–∞—Å —Å–µ—Ä–≤–µ—Ä–∞: " + utcTime.getHour() + "\n" +
                "–ß–∞—Å –ú–æ—Å–∫–≤—ã: " + moscowTime.getHour();

        sendMsg(chatId, timeInfo);
    }

    private void handleCallbackQuery(org.telegram.telegrambots.meta.api.objects.CallbackQuery callbackQuery, boolean isAdminUser) {
        Long chatId = callbackQuery.getMessage().getChatId();
        Long userId = callbackQuery.getFrom().getId();
        String data = callbackQuery.getData();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        System.out.println("üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: " + data + " –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId + " (admin: " + isAdminUser + ")");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if (data.startsWith("schedule_") || data.startsWith("day_") || data.startsWith("edit_") ||
                data.startsWith("delete_") || data.equals("back_to_schedule") || data.equals("back_to_main")) {

            if (!isAdminUser) {
                System.out.println("‚õî –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–µ–∑ –ø—Ä–∞–≤: " + userId);
                answerCallbackQuery(callbackQuery.getId(), "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
        switch (data) {
            case "schedule_morning" -> {
                if (isAdminUser) {
                    showDaySelection(chatId, "morning");
                } else {
                    answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
                }
            }
            case "schedule_evening" -> {
                if (isAdminUser) {
                    showDaySelection(chatId, "evening");
                } else {
                    answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
                }
            }
            case "back_to_schedule" -> {
                if (isAdminUser) {
                    showScheduleMenu(chatId);
                } else {
                    answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
                }
            }
            case "back_to_main" -> showMainMenu(chatId, isAdminUser);
            default -> {
                if (data.startsWith("day_")) {
                    if (isAdminUser) {
                        handleDaySelection(chatId, data);
                    } else {
                        answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
                    }
                } else if (data.startsWith("edit_")) {
                    if (isAdminUser) {
                        handleEditLesson(chatId, data);
                    } else {
                        answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
                    }
                } else if (data.startsWith("delete_")) {
                    if (isAdminUser) {
                        handleDeleteLesson(chatId, data, messageId);
                    } else {
                        answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
                    }
                } else if (data.startsWith("signup_")) {
                    handleUserSignup(callbackQuery);
                } else if (data.startsWith("cancel_")) {
                    handleUserCancel(callbackQuery);
                } else {
                    System.out.println("‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: " + data);
                    answerCallbackQuery(callbackQuery.getId(), "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                }
            }
        }
    }

    private void handleAdminMessage(Long chatId, String text, Long userId) {
        System.out.println("üë®‚Äçüíº –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã: " + text);

        switch (text) {
            case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" -> {
                System.out.println("üìÖ –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –í–´–ó–´–í–ê–ï–ú showScheduleMenu");
                showScheduleMenu(chatId);  // –≠–¢–ê –°–¢–†–û–ö–ê –î–û–õ–ñ–ù–ê –í–´–ó–´–í–ê–¢–¨–°–Ø!
            }
            case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" -> {
                System.out.println("üîî –ê–¥–º–∏–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                toggleNotifications(chatId);
            }
            case "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏" -> {
                System.out.println("üìã –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Å–µ –∑–∞–ø–∏—Å–∏");
                showRegistrations(chatId);
            }
            case "üìä –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π" -> {
                System.out.println("üìä –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π");
                showAdminLogs(chatId);
            }
            case "üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" -> {
                System.out.println("üß™ –ê–¥–º–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                sendTestNotificationToAdmin(chatId);
            }
            case "üïí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è" -> {
                System.out.println("üïí –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è");
                checkAndSendTime(chatId);
            }
            case "üö´ –û—Ç–º–µ–Ω–∞" -> {
                System.out.println("üö´ –ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ");
                userStates.remove(userId);
                showMainMenu(chatId, true);
            }
            default -> {
                System.out.println("üìù –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç: " + text);
                handleState(chatId, text, userId);
            }
        }
    }

    private void testInlineButtons(Long chatId) {
        try {
            System.out.println("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ inline-–∫–Ω–æ–ø–æ–∫");

            String text = "üß™ *–¢–µ—Å—Ç inline-–∫–Ω–æ–ø–æ–∫*\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ - –∑–Ω–∞—á–∏—Ç inline-–∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!";

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            // –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            row1.add(createInlineButton("‚úÖ –¢–µ—Å—Ç 1", "test_button_1"));
            row1.add(createInlineButton("‚úÖ –¢–µ—Å—Ç 2", "test_button_2"));

            List<InlineKeyboardButton> row2 = new ArrayList<>();
            row2.add(createInlineButton("üîô –ù–∞–∑–∞–¥", "test_back"));

            rows.add(row1);
            rows.add(row2);
            markup.setKeyboard(rows);

            SendMessage message = new SendMessage(chatId.toString(), text);
            message.setParseMode("Markdown");
            message.setReplyMarkup(markup);

            System.out.println("üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏...");
            execute(message);
            System.out.println("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–Ω–æ–ø–æ–∫: " + e.getMessage());
            e.printStackTrace();

            try {
                sendMsg(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: " + e.getMessage());
            } catch (Exception ex) {
                System.err.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: " + ex.getMessage());
            }
        }
    }

    private void testScheduleMenu(Long chatId) {
        try {
            String text = "üêõ *–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ inline-–∫–Ω–æ–ø–æ–∫:";

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            row1.add(createInlineButton("üåÖ –¢–µ—Å—Ç –£—Ç—Ä–æ", "schedule_morning"));
            row1.add(createInlineButton("üåá –¢–µ—Å—Ç –í–µ—á–µ—Ä", "schedule_evening"));

            List<InlineKeyboardButton> row2 = new ArrayList<>();
            row2.add(createInlineButton("üîô –¢–µ—Å—Ç –ù–∞–∑–∞–¥", "back_to_main"));

            rows.add(row1);
            rows.add(row2);
            markup.setKeyboard(rows);

            SendMessage message = new SendMessage(chatId.toString(), text);
            message.setParseMode("Markdown");
            message.setReplyMarkup(markup);

            execute(message);
            System.out.println("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –º–µ–Ω—é: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void showAdminLogs(Long chatId) {
        if (!isAdmin(chatId)) {
            sendMsg(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
            return;
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            List<Map<String, Object>> logs = databaseService.getAdminLogs(10); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π

            if (logs.isEmpty()) {
                sendMsg(chatId, "üìä *–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤*\n\n–õ–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.");
                return;
            }

            StringBuilder sb = new StringBuilder();
            sb.append("üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n");

            for (Map<String, Object> log : logs) {
                String action = (String) log.get("action");
                String details = (String) log.get("details");
                String timestamp = ((java.sql.Timestamp) log.get("created_at")).toLocalDateTime()
                        .format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
                Long adminId = (Long) log.get("admin_id");

                sb.append("üïí *").append(timestamp).append("*\n");
                sb.append("üë§ Admin ID: ").append(adminId).append("\n");
                sb.append("üìù –î–µ–π—Å—Ç–≤–∏–µ: ").append(getActionDescription(action)).append("\n");

                if (details != null && !details.isEmpty()) {
                    sb.append("‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏: ").append(details).append("\n");
                }

                sb.append("\n");
            }

            sendMsg(chatId, sb.toString());

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: " + e.getMessage());
            sendMsg(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π");
        }
    }

    private String getActionDescription(String action) {
        switch (action) {
            case "CHANGE_SCHEDULE": return "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è";
            case "TOGGLE_NOTIFICATIONS": return "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π";
            case "SEND_TEST_NOTIFICATION": return "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π";
            default: return action;
        }
    }

    private void showMainMenu(Long chatId, boolean isAdminUser) {
        String text;
        if (isAdminUser) {
            text = "üßò *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å YogaBot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:";
        } else {
            text = "üßò *YogaBot - –ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        }

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createMainMenuKeyboard(isAdminUser));

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞ " + chatId + " (admin: " + isAdminUser + ")");
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: " + e.getMessage());
        }
    }

    private ReplyKeyboardMarkup createMainMenuKeyboard(boolean isAdminUser) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row1.add("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏");

        KeyboardRow row2 = new KeyboardRow();
        row2.add("üïí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è");

        keyboard.add(row1);
        keyboard.add(row2);

        // –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (isAdminUser) {
            System.out.println("üë®‚Äçüíº –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

            KeyboardRow adminRow1 = new KeyboardRow();
            adminRow1.add("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
            adminRow1.add("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏");

            KeyboardRow adminRow2 = new KeyboardRow();
            adminRow2.add("üìä –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π");
            adminRow2.add("üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");

            keyboard.add(adminRow1);
            keyboard.add(adminRow2);
        } else {
            System.out.println("üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è");
        }

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private void showScheduleForUsers(Long chatId) {
        String scheduleText = getWeeklySchedule();
        String text = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n" + scheduleText +
                "\n\n–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ!";

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
        }
    }

    private void showUserRegistrations(Long chatId, Long userId) {
        LocalDate tomorrow = LocalDate.now().plusDays(1);

        try {
            boolean hasMorning = databaseService.isUserRegistered(userId, tomorrow, "morning");
            boolean hasEvening = databaseService.isUserRegistered(userId, tomorrow, "evening");

            StringBuilder sb = new StringBuilder();
            sb.append("üìã *–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (").append(tomorrow.format(DateTimeFormatter.ofPattern("dd.MM"))).append(")*\n\n");

            if (!hasMorning && !hasEvening) {
                sb.append("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞.\n\n");
                sb.append("–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞ @yoga_yollayo11");
            } else {
                if (hasMorning) {
                    sb.append("‚úÖ –ó–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–∞–∫—Ç–∏–∫—É\n");
                }
                if (hasEvening) {
                    sb.append("‚úÖ –ó–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é –ø—Ä–∞–∫—Ç–∏–∫—É\n");
                }
                sb.append("\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞");
            }

            sendMsg(chatId, sb.toString());

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            sendMsg(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π");
        }
    }

    private void showScheduleMenu(Long chatId) {
        System.out.println("üéØ –ù–ê–ß–ê–õ–û showScheduleMenu –¥–ª—è —á–∞—Ç–∞ " + chatId);

        try {
            System.out.println("üîÑ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...");
            String scheduleText = getWeeklySchedule();
            System.out.println("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –¥–ª–∏–Ω–∞: " + scheduleText.length());

            String text = "üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n" + scheduleText + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:";

            System.out.println("üîß –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏...");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            row1.add(createInlineButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è", "schedule_morning"));
            row1.add(createInlineButton("üåá –í–µ—á–µ—Ä–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è", "schedule_evening"));

            List<InlineKeyboardButton> row2 = new ArrayList<>();
            row2.add(createInlineButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main"));

            rows.add(row1);
            rows.add(row2);
            markup.setKeyboard(rows);

            System.out.println("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...");

            SendMessage message = new SendMessage(chatId.toString(), text);
            message.setParseMode("Markdown");
            message.setReplyMarkup(markup);

            System.out.println("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏...");
            execute(message);
            System.out.println("‚úÖ –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ " + chatId);

        } catch (Exception e) {
            System.err.println("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ showScheduleMenu: " + e.getMessage());
            e.printStackTrace();

            try {
                sendMsg(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
            } catch (Exception ex) {
                System.err.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: " + ex.getMessage());
            }
        }

        System.out.println("üéØ –ö–û–ù–ï–¶ showScheduleMenu");
    }

    private String getWeeklySchedule() {
        System.out.println("üîÑ –í—ã–∑–æ–≤ getWeeklySchedule()");
        System.out.println("üìä fixedSchedule size: " + fixedSchedule.size());

        try {
            StringBuilder sb = new StringBuilder();
            LocalDate today = LocalDate.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE (dd.MM)");

            for (int i = 0; i < 7; i++) {
                LocalDate date = today.plusDays(i);
                DayOfWeek dayOfWeek = date.getDayOfWeek();

                System.out.println("üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å: " + dayOfWeek);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
                if (!fixedSchedule.containsKey(dayOfWeek)) {
                    System.out.println("‚ö†Ô∏è –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–Ω—è: " + dayOfWeek);
                    continue;
                }

                String dayName = date.format(formatter);
                dayName = dayName.substring(0, 1).toUpperCase() + dayName.substring(1);

                sb.append("üìÖ *").append(dayName).append("*\n");

                String morningLesson = fixedSchedule.get(dayOfWeek).get("morning");
                String eveningLesson = fixedSchedule.get(dayOfWeek).get("evening");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ null
                morningLesson = morningLesson != null ? morningLesson : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
                eveningLesson = eveningLesson != null ? eveningLesson : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

                sb.append("üåÖ *–£—Ç—Ä–æ:* ").append(morningLesson).append("\n");
                sb.append("üåá *–í–µ—á–µ—Ä:* ").append(eveningLesson).append("\n\n");

                System.out.println("   - –£—Ç—Ä–æ: " + morningLesson);
                System.out.println("   - –í–µ—á–µ—Ä: " + eveningLesson);
            }

            String result = sb.toString();
            System.out.println("‚úÖ getWeeklySchedule —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–ª–∏–Ω–∞: " + result.length());
            return result;

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ getWeeklySchedule: " + e.getMessage());
            e.printStackTrace();
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    private void showDaySelection(Long chatId, String lessonType) {
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–∏—Ö" : "–≤–µ—á–µ—Ä–Ω–∏—Ö";
        String text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è " + typeText + " –∑–∞–Ω—è—Ç–∏–π:";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        DayOfWeek[] days = {
                DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY,
                DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY
        };

        String[] dayNames = {"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"};

        for (int i = 0; i < days.length; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            String callbackData = "day_" + days[i] + "_" + lessonType;
            row.add(createInlineButton(dayNames[i], callbackData));
            rows.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ù–∞–∑–∞–¥", "back_to_schedule"));
        rows.add(backRow);

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setReplyMarkup(markup);

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä –¥–Ω–µ–π –¥–ª—è " + lessonType + " –¥–ª—è –∞–¥–º–∏–Ω–∞ " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è: " + e.getMessage());
        }
    }

    private void handleDaySelection(Long chatId, String data) {
        String[] parts = data.split("_");
        DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
        String lessonType = parts[2];

        String dayName = getRussianDayNameFull(dayOfWeek);
        String currentSchedule = fixedSchedule.get(dayOfWeek).get(lessonType);

        String text = "üìÖ *" + dayName + " - " + (lessonType.equals("morning") ? "–£—Ç—Ä–æ" : "–í–µ—á–µ—Ä") + "*\n\n";
        text += "üìù *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n" + currentSchedule + "\n\n";
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π - –í–û–¢ –û–ù–ò!
        List<InlineKeyboardButton> actionRow = new ArrayList<>();
        actionRow.add(createInlineButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "edit_" + dayOfWeek + "_" + lessonType));
        actionRow.add(createInlineButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "delete_" + dayOfWeek + "_" + lessonType));

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createInlineButton("üîô –ù–∞–∑–∞–¥", "schedule_" + lessonType));

        rows.add(actionRow);
        rows.add(backRow);
        markup.setKeyboard(rows);

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(markup);

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–Ω—è " + dayName + " " + lessonType + " –¥–ª—è –∞–¥–º–∏–Ω–∞ " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–Ω—è: " + e.getMessage());
        }
    }

    private void handleEditLesson(Long chatId, String data) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!isAdmin(chatId)) {
            sendMsg(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
            return;
        }

        // data format: "edit_MONDAY_morning"
        String[] parts = data.split("_");
        DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
        String lessonType = parts[2];

        String dayName = getRussianDayNameFull(dayOfWeek);
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ" : "–≤–µ—á–µ—Ä–Ω–µ–≥–æ";
        String currentSchedule = fixedSchedule.get(dayOfWeek).get(lessonType);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
        userStates.put(chatId, "editing_" + dayOfWeek + "_" + lessonType);

        String text = "‚úèÔ∏è *–ò–∑–º–µ–Ω–µ–Ω–∏–µ " + typeText + " –∑–∞–Ω—è—Ç–∏—è –Ω–∞ " + dayName + "*\n\n";
        text += "üìù *–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n" + currentSchedule + "\n\n";
        text += "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n";
        text += "`10:00 - 11:30 - –ê—à—Ç–∞–Ω–≥–∞ –π–æ–≥–∞`\n\n";
        text += "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'üö´ –û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã";

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createCancelKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void handleDeleteLesson(Long chatId, String data, Integer messageId) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if (!isAdmin(chatId)) {
            answerCallbackQuery(data, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π");
            return;
        }

        String[] parts = data.split("_");
        DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
        String lessonType = parts[2];

        String dayName = getRussianDayNameFull(dayOfWeek);
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–µ–µ" : "–≤–µ—á–µ—Ä–Ω–µ–µ";

        String deletedSchedule = "–û—Ç–¥—ã—Ö";
        fixedSchedule.get(dayOfWeek).put(lessonType, deletedSchedule);

        // –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–ï –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
        databaseService.saveSchedule(dayOfWeek, lessonType, deletedSchedule, chatId);

        String text = "‚úÖ *" + typeText + " –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ " + dayName + " —É–¥–∞–ª–µ–Ω–æ!*\n\n";
        text += "–¢–µ–ø–µ—Ä—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–æ: *–û—Ç–¥—ã—Ö*";

        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId.toString());
        editMessage.setMessageId(messageId);
        editMessage.setText(text);
        editMessage.setParseMode("Markdown");

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        showDaySelection(chatId, lessonType);
    }

    private void handleState(Long chatId, String text, Long userId) {
        String state = userStates.get(userId);

        if (state != null && state.startsWith("editing_")) {
            String[] parts = state.split("_");
            DayOfWeek dayOfWeek = DayOfWeek.valueOf(parts[1]);
            String lessonType = parts[2];

            updateLessonSchedule(chatId, text, dayOfWeek, lessonType);
            userStates.remove(userId);
        }
    }

    private void updateLessonSchedule(Long chatId, String newSchedule, DayOfWeek dayOfWeek, String lessonType) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        if (!isAdmin(chatId)) {
            sendMsg(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π");
            userStates.remove(chatId);
            return;
        }

        String dayName = getRussianDayNameFull(dayOfWeek);
        String typeText = lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω–µ–µ" : "–≤–µ—á–µ—Ä–Ω–µ–µ";

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        fixedSchedule.get(dayOfWeek).put(lessonType, newSchedule);

        // –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –î–ê–ù–ù–´–• —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        databaseService.saveSchedule(dayOfWeek, lessonType, newSchedule, chatId);

        String text = "‚úÖ *" + typeText + " –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ " + dayName + " –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\n";
        text += "üìù *–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n" + newSchedule + "\n\n";
        text += "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Ä–∞–∑—è—Ç—Å—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.";

        SendMessage message = new SendMessage(chatId.toString(), text);
        message.setParseMode("Markdown");

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + e.getMessage());
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        showDaySelection(chatId, lessonType);
    }

    private ReplyKeyboardMarkup createCancelKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        KeyboardRow row = new KeyboardRow();
        row.add("üö´ –û—Ç–º–µ–Ω–∞");

        keyboardMarkup.setKeyboard(List.of(row));
        return keyboardMarkup;
    }

    private String getRussianDayNameFull(DayOfWeek dayOfWeek) {
        switch (dayOfWeek) {
            case MONDAY: return "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫";
            case TUESDAY: return "–í—Ç–æ—Ä–Ω–∏–∫";
            case WEDNESDAY: return "–°—Ä–µ–¥–∞";
            case THURSDAY: return "–ß–µ—Ç–≤–µ—Ä–≥";
            case FRIDAY: return "–ü—è—Ç–Ω–∏—Ü–∞";
            case SATURDAY: return "–°—É–±–±–æ—Ç–∞";
            case SUNDAY: return "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ";
            default: return "";
        }
    }

    private void toggleNotifications(Long chatId) {
        boolean newState = databaseService.toggleNotifications();

        String text = newState ?
                "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!*\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª:\n‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ - –≤ 12:00 –ú–°–ö\n‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ - –≤ 18:00 –ú–°–ö\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–Ω—è—Ç–∏–π - –≤ 14:00 –ú–°–ö" :
                "üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!*\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª.";

        sendMsg(chatId, text);
    }

    private void showRegistrations(Long chatId) {
        LocalDate tomorrow = LocalDate.now().plusDays(1);
        Map<String, List<String>> registrations = databaseService.getRegistrationsForDate(tomorrow);

        StringBuilder sb = new StringBuilder();
        sb.append("üìã *–ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (").append(tomorrow.format(DateTimeFormatter.ofPattern("dd.MM"))).append(")*\n\n");

        sb.append("üåÖ *–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n");
        if (registrations.get("morning").isEmpty()) {
            sb.append("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç\n\n");
        } else {
            int counter = 1;
            for (String name : registrations.get("morning")) {
                sb.append(counter).append(". ").append(name).append("\n");
                counter++;
            }
            sb.append("\n");
        }

        sb.append("üåá *–í–µ—á–µ—Ä–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n");
        if (registrations.get("evening").isEmpty()) {
            sb.append("–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç");
        } else {
            int counter = 1;
            for (String name : registrations.get("evening")) {
                sb.append(counter).append(". ").append(name).append("\n");
                counter++;
            }
        }

        sb.append("\n\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n");
        sb.append("‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ: ").append(registrations.get("morning").size()).append(" —á–µ–ª.\n");
        sb.append("‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ: ").append(registrations.get("evening").size()).append(" —á–µ–ª.\n");
        sb.append("‚Ä¢ –í—Å–µ–≥–æ: ").append(registrations.get("morning").size() + registrations.get("evening").size()).append(" —á–µ–ª.");

        sendMsg(chatId, sb.toString());
    }

    public void sendTestNotification() {
        System.out.println("üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");

        LocalDate tomorrow = LocalDate.now().plusDays(1);
        Map<String, String> tomorrowSchedule = getTomorrowSchedule(tomorrow);

        String morningLesson = tomorrowSchedule.get("morning");
        String eveningLesson = tomorrowSchedule.get("evening");

        System.out.println("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:");
        System.out.println("–£—Ç—Ä–æ: " + morningLesson);
        System.out.println("–í–µ—á–µ—Ä: " + eveningLesson);

        System.out.println("üîî –¢–µ—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
        sendMorningNotification(morningLesson);

        try {
            Thread.sleep(2000);
            System.out.println("üîî –¢–µ—Å—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
            sendEveningNotification(eveningLesson);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã!");
    }

    private void sendTestNotificationToAdmin(Long chatId) {
        try {
            sendTestNotification();
            sendMsg(chatId, "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ @yoga_yollayo11");
        } catch (Exception e) {
            sendMsg(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " + e.getMessage());
        }
    }

    public void sendManualNotification(String type) {
        System.out.println("üîî –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + type);

        LocalDate tomorrow = LocalDate.now().plusDays(1);
        Map<String, String> tomorrowSchedule = getTomorrowSchedule(tomorrow);

        String morningLesson = tomorrowSchedule.get("morning");
        String eveningLesson = tomorrowSchedule.get("evening");

        switch (type) {
            case "morning":
                sendMorningNotification(morningLesson);
                break;
            case "evening":
                sendEveningNotification(eveningLesson);
                break;
            case "no_classes":
                sendNoClassesNotification(morningLesson, eveningLesson);
                break;
            case "all":
                sendTestNotification();
                break;
        }
    }

    public Map<String, String> getTomorrowSchedule(LocalDate tomorrow) {
        Map<String, String> schedule = new HashMap<>();
        DayOfWeek dayOfWeek = tomorrow.getDayOfWeek();

        schedule.put("morning", fixedSchedule.get(dayOfWeek).get("morning"));
        schedule.put("evening", fixedSchedule.get(dayOfWeek).get("evening"));

        return schedule;
    }

    public void sendMorningNotification(String morningLesson) {
        if (morningLesson == null || morningLesson.equals("–û–¢–î–´–•") || morningLesson.equals("–û—Ç–¥—ã—Ö")) {
            sendToChannel("üåÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
            return;
        }

        String text = "üåÖ *–ó–∞–≤—Ç—Ä–∞—à–Ω—è—è —É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n\n" + morningLesson + "\n\n";
        text += "üìç *–ú–µ—Å—Ç–æ:* –°—Ç—É–¥–∏—è –π–æ–≥–∏\n\n";
        text += "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createInlineButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "signup_morning"));
        row.add(createInlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "cancel_morning"));
        markup.setKeyboard(List.of(row));

        sendToChannel(text, markup);
    }

    public void sendEveningNotification(String eveningLesson) {
        if (eveningLesson == null || eveningLesson.equals("–û–¢–î–´–•") || eveningLesson.equals("–û—Ç–¥—ã—Ö")) {
            sendToChannel("üåá –ù–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
            return;
        }

        String text = "üåá *–ó–∞–≤—Ç—Ä–∞—à–Ω—è—è –≤–µ—á–µ—Ä–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞:*\n\n" + eveningLesson + "\n\n";
        text += "üìç *–ú–µ—Å—Ç–æ:* –°—Ç—É–¥–∏—è –π–æ–≥–∏\n\n";
        text += "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createInlineButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "signup_evening"));
        row.add(createInlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "cancel_evening"));
        markup.setKeyboard(List.of(row));

        sendToChannel(text, markup);
    }

    public void sendNoClassesNotification(String morningLesson, String eveningLesson) {
        boolean hasMorning = morningLesson != null && !morningLesson.equals("–û–¢–î–´–•") && !morningLesson.equals("–û—Ç–¥—ã—Ö");
        boolean hasEvening = eveningLesson != null && !eveningLesson.equals("–û–¢–î–´–•") && !eveningLesson.equals("–û—Ç–¥—ã—Ö");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –ï–°–¢–¨ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
        if (!hasMorning && !hasEvening) {
            String text = "–ù–µ –º–æ–≥—É —Å—Ç–æ—è—Ç—å, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç... –ü–æ–π–¥—É –ø–æ–ª–µ–∂—É...)\n\n–£—Ä–∞, –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç! –û—Ç–¥—ã—Ö–∞–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è! üí´";
            sendToChannel(text);
        } else if (!hasMorning) {
            sendToChannel("üåÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
        } else if (!hasEvening) {
            sendToChannel("üåá –ù–∞ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç");
        } else {
            // –ï—Å–ª–∏ –æ–±–∞ –∑–∞–Ω—è—Ç–∏—è –µ—Å—Ç—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
            System.out.println("‚úÖ –û–±–∞ –∑–∞–Ω—è—Ç–∏—è –µ—Å—Ç—å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
        }
    }

    private void sendToChannel(String text) {
        sendToChannel(text, null);
    }

    private void sendToChannel(String text, InlineKeyboardMarkup markup) {
        if (channelId == null || channelId.isEmpty()) {
            System.out.println("‚ö†Ô∏è Channel ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return;
        }

        SendMessage message = new SendMessage(channelId, text);
        message.setParseMode("Markdown");

        if (markup != null) {
            message.setReplyMarkup(markup);
        }

        try {
            execute(message);
            System.out.println("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª");
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: " + e.getMessage());
        }
    }

    private void handleUserSignup(org.telegram.telegrambots.meta.api.objects.CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long userId = callbackQuery.getFrom().getId();
        String username = callbackQuery.getFrom().getUserName();
        String firstName = callbackQuery.getFrom().getFirstName();

        String displayName = username != null ? "@" + username : firstName;
        String lessonType = data.substring(7);
        LocalDate tomorrow = LocalDate.now().plusDays(1);

        boolean success = databaseService.registerUser(userId, username, displayName, tomorrow, lessonType);

        String answer = success ?
                "‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ " + (lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω—é—é" : "–≤–µ—á–µ—Ä–Ω—é—é") + " –ø—Ä–∞–∫—Ç–∏–∫—É!" :
                "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!";

        answerCallbackQuery(callbackQuery.getId(), answer);
    }

    private void handleUserCancel(org.telegram.telegrambots.meta.api.objects.CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        Long userId = callbackQuery.getFrom().getId();
        String lessonType = data.substring(7);
        LocalDate tomorrow = LocalDate.now().plusDays(1);

        boolean success = databaseService.cancelRegistration(userId, tomorrow, lessonType);

        String answer = success ?
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ " + (lessonType.equals("morning") ? "—É—Ç—Ä–µ–Ω–Ω—é—é" : "–≤–µ—á–µ—Ä–Ω—é—é") + " –ø—Ä–∞–∫—Ç–∏–∫—É –æ—Ç–º–µ–Ω–µ–Ω–∞!" :
                "‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ!";

        answerCallbackQuery(callbackQuery.getId(), answer);
    }

    private void answerCallbackQuery(String callbackQueryId, String text) {
        try {
            org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery answer = new org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQueryId);
            answer.setText(text);
            answer.setShowAlert(false);
            execute(answer);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: " + e.getMessage());
        }
    }

    private void sendMsg(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        try {
            execute(message);
            System.out.println("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private boolean isAdmin(Long userId) {
        if (adminId == null || adminId.isEmpty()) {
            System.out.println("‚ö†Ô∏è Admin ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return false;
        }

        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–¥–∏–Ω ID), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (—Å–ø–∏—Å–æ–∫ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        String[] adminIds = adminId.split(",");
        for (String id : adminIds) {
            if (id.trim().equals(userId.toString())) {
                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º (ID: " + id.trim() + ")");
                return true;
            }
        }

        System.out.println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º. –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã: " + Arrays.toString(adminIds));
        return false;
    }

    public void checkServerTime() {
        System.out.println("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC): " + LocalDateTime.now());
        System.out.println("üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è Moscow (UTC+3): " + LocalDateTime.now().plusHours(3));
        System.out.println("üïí –¢–µ–∫—É—â–∏–π —á–∞—Å (UTC): " + LocalDateTime.now().getHour());
        System.out.println("üïí –¢–µ–∫—É—â–∏–π —á–∞—Å (Moscow): " + LocalDateTime.now().plusHours(3).getHour());
    }
}