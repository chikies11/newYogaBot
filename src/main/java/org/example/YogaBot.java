package org.example;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class YogaBot extends TelegramWebhookBot {

    @Value("${bot.username:}")
    private String botUsername;

    @Value("${bot.token:}")
    private String botToken;

    @Value("${bot.path:}")
    private String botPath;

    @Value("${spring.datasource.url:}")
    private String dbUrl;

    @Value("${spring.datasource.username:}")
    private String dbUsername;

    @Value("${spring.datasource.password:}")
    private String dbPassword;

    @Value("${app.channelId:}")
    private String channelId;

    @Value("${app.adminId:}")
    private String adminId;

    private final Map<Long, Boolean> subscriptions = new HashMap<>();

    @PostConstruct
    public void postConstruct() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YogaBot...");
        System.out.println("Database URL: " + (dbUrl != null ? dbUrl.substring(0, Math.min(dbUrl.length(), 50)) + "..." : "null"));
        System.out.println("Database Username: " + dbUsername);
        System.out.println("Bot Username: " + botUsername);
        System.out.println("Bot Token: " + (botToken != null ? "***" + botToken.substring(Math.max(0, botToken.length() - 5)) : "null"));

        if (dbUrl != null && !dbUrl.isEmpty() && dbUsername != null && dbPassword != null) {
            initDb();
        } else {
            System.out.println("‚ö†Ô∏è Database –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î");
        }
        System.out.println("‚úÖ YogaBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotPath() {
        return botPath != null && !botPath.isEmpty() ? botPath : "/";
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        System.out.println("üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + update.getUpdateId());

        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();
            Long userId = update.getMessage().getFrom().getId();

            System.out.println("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç " + userId + ": " + text);

            switch (text) {
                case "/start" -> showMainMenu(chatId);
                case "üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" -> showSchedule(chatId);
                case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" -> toggleSubscription(chatId, userId);
                case "‚ÑπÔ∏è –û –Ω–∞—Å" -> showAbout(chatId);
                case "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã" -> showContacts(chatId);
                default -> {
                    if (text.startsWith("/")) {
                        sendMsg(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ üëá", true);
                    } else {
                        sendMsg(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá", true);
                    }
                }
            }

        } else {
            System.out.println("‚ö†Ô∏è Update –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }

        System.out.println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: " + update.getUpdateId());
        return null;
    }

    private void showMainMenu(Long chatId) {
        String welcomeText = """
                üßò *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YogaBot!*
                
                –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
                
                –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:""";

        SendMessage message = new SendMessage(chatId.toString(), welcomeText);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createMainMenuKeyboard());

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞ " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: " + e.getMessage());
        }
    }

    private ReplyKeyboardMarkup createMainMenuKeyboard() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü–µ—Ä–≤—ã–π —Ä—è–¥
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ");
        row1.add("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥
        KeyboardRow row2 = new KeyboardRow();
        row2.add("‚ÑπÔ∏è –û –Ω–∞—Å");
        row2.add("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã");

        keyboard.add(row1);
        keyboard.add(row2);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private void sendMsg(Long chatId, String text) {
        sendMsg(chatId, text, true);
    }

    private void sendMsg(Long chatId, String text, boolean showKeyboard) {
        if (chatId == null) {
            System.err.println("‚ùå chatId is null");
            return;
        }

        SendMessage message = new SendMessage(chatId.toString(), text);

        if (showKeyboard) {
            message.setReplyMarkup(createMainMenuKeyboard());
        }

        try {
            execute(message);
            System.out.println("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void showAbout(Long chatId) {
        String aboutText = """
                üßò *–û –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏ –π–æ–≥–∏*
                
                –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –π–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:
                
                ‚Ä¢ üïó *–£—Ç—Ä–µ–Ω–Ω—è—è –π–æ–≥–∞* - –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∏ –∑–∞—Ä—è–¥–∞ —ç–Ω–µ—Ä–≥–∏–µ–π
                ‚Ä¢ üåô *–í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è* - –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –∏ —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞
                ‚Ä¢ üåø *–•–∞—Ç—Ö–∞ –π–æ–≥–∞* - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞—Å–∞–Ω—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏ —Ç–µ–ª–∞ –∏ –¥—É—Ö–∞
                
                –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É!""";

        SendMessage message = new SendMessage(chatId.toString(), aboutText);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createMainMenuKeyboard());

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–∏–∏ –¥–ª—è —á–∞—Ç–∞ " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    private void showContacts(Long chatId) {
        String contactsText = """
                üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*
                
                *–°—Ç—É–¥–∏—è –π–æ–≥–∏ "YogaSpace"*
                
                üìç *–ê–¥—Ä–µ—Å:* —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123
                üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 7:00 - 22:00
                üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 (999) 123-45-67
                üåê *–°–∞–π—Ç:* www.yogaspace.ru
                üìß *Email:* info@yogaspace.ru
                
                *–ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏:*
                üöá –ú–µ—Ç—Ä–æ "–ü—Ä–∏–º–µ—Ä–Ω–∞—è" (5 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)
                üöç –ê–≤—Ç–æ–±—É—Å—ã: 123, 456
                üöó –ï—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∞""";

        SendMessage message = new SendMessage(chatId.toString(), contactsText);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createMainMenuKeyboard());

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —á–∞—Ç–∞ " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: " + e.getMessage());
        }
    }

    private Connection getConnection() throws SQLException {
        System.out.println("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...");
        return DriverManager.getConnection(dbUrl, dbUsername, dbPassword);
    }

    private void initDb() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

        try (Connection conn = getConnection()) {
            Statement st = conn.createStatement();

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS lessons (
                    id BIGSERIAL PRIMARY KEY,
                    datetime TIMESTAMP NOT NULL,
                    title TEXT NOT NULL,
                    description TEXT
                )
            """);

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS signups (
                    id BIGSERIAL PRIMARY KEY,
                    lesson_id BIGINT REFERENCES lessons(id) ON DELETE CASCADE,
                    username TEXT NOT NULL,
                    user_id BIGINT NOT NULL
                )
            """);

            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id BIGSERIAL PRIMARY KEY,
                    user_id BIGINT UNIQUE NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            ResultSet rs = st.executeQuery("SELECT COUNT(*) as count FROM lessons");
            rs.next();
            if (rs.getInt("count") == 0) {
                st.executeUpdate("""
                    INSERT INTO lessons (datetime, title, description) VALUES 
                    (NOW() + INTERVAL '1 day', '–£—Ç—Ä–µ–Ω–Ω—è—è –π–æ–≥–∞', '–ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å'),
                    (NOW() + INTERVAL '2 days', '–í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è', '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞'),
                    (NOW() + INTERVAL '3 days', '–•–∞—Ç—Ö–∞ –π–æ–≥–∞', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞—Å–∞–Ω—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏')
                """);
                System.out.println("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è");
            }

            System.out.println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void toggleSubscription(Long chatId, Long userId) {
        if (dbUrl == null || dbUrl.isEmpty() || dbUsername == null || dbPassword == null) {
            sendMsg(chatId, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
            return;
        }

        try (Connection conn = getConnection()) {
            PreparedStatement checkStmt = conn.prepareStatement(
                    "SELECT id FROM subscriptions WHERE user_id = ?"
            );
            checkStmt.setLong(1, userId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                PreparedStatement deleteStmt = conn.prepareStatement(
                        "DELETE FROM subscriptions WHERE user_id = ?"
                );
                deleteStmt.setLong(1, userId);
                deleteStmt.executeUpdate();
                sendMsg(chatId, "üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã*\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö.");
                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –æ—Ç–ø–∏—Å–∞–ª—Å—è");
            } else {
                PreparedStatement insertStmt = conn.prepareStatement(
                        "INSERT INTO subscriptions (user_id) VALUES (?)"
                );
                insertStmt.setLong(1, userId);
                insertStmt.executeUpdate();
                sendMsg(chatId, "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö –∑–∞ 2 —á–∞—Å–∞.");
                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –ø–æ–¥–ø–∏—Å–∞–ª—Å—è");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
            sendMsg(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
        }
    }

    private void showSchedule(Long chatId) {
        if (dbUrl == null || dbUrl.isEmpty() || dbUsername == null || dbPassword == null) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –ë–î –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
            showTestSchedule(chatId);
            return;
        }

        try (Connection conn = getConnection()) {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("""
                SELECT id, datetime, title, description 
                FROM lessons 
                WHERE datetime > CURRENT_TIMESTAMP 
                ORDER BY datetime 
                LIMIT 10
            """);

            StringBuilder sb = new StringBuilder("üìñ *–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è:*\n\n");
            int count = 0;

            while (rs.next()) {
                count++;
                sb.append("*")
                        .append(count)
                        .append("*. ")
                        .append(rs.getTimestamp("datetime").toLocalDateTime())
                        .append(" - ")
                        .append(rs.getString("title"))
                        .append("\nüìù ")
                        .append(rs.getString("description"))
                        .append("\n\n");
            }

            if (count == 0) {
                sb.append("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!");
            } else {
                sb.append("üéØ *–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!*");
            }

            SendMessage message = new SendMessage(chatId.toString(), sb.toString());
            message.setParseMode("Markdown");
            message.setReplyMarkup(createMainMenuKeyboard());

            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ " + chatId);

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
            showTestSchedule(chatId);
        }
    }

    private void showTestSchedule(Long chatId) {
        String testSchedule = """
                üìñ *–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è:*
                
                *1.* –ó–∞–≤—Ç—Ä–∞, 10:00 - –£—Ç—Ä–µ–Ω–Ω—è—è –π–æ–≥–∞
                üìù –ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
                
                *2.* –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, 18:00 - –í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è  
                üìù –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞
                
                *3.* –ß–µ—Ä–µ–∑ 3 –¥–Ω—è, 19:00 - –•–∞—Ç—Ö–∞ –π–æ–≥–∞
                üìù –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞—Å–∞–Ω—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏
                
                üéØ *–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!*""";

        SendMessage message = new SendMessage(chatId.toString(), testSchedule);
        message.setParseMode("Markdown");
        message.setReplyMarkup(createMainMenuKeyboard());

        try {
            execute(message);
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
        }
    }

    private boolean isAdmin(Long userId) {
        return adminId != null && adminId.equals(userId.toString());
    }
}