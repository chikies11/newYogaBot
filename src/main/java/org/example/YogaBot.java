package org.example;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import jakarta.annotation.PostConstruct;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.sql.*;
import java.util.HashMap;
import java.util.Map;

@Component
public class YogaBot extends TelegramWebhookBot {

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    @Value("${bot.path:/}")
    private String botPath;

    @Value("${spring.datasource.url}")
    private String dbUrl;

    @Value("${app.channelId}")
    private String channelId;

    @Value("${app.adminId}")
    private String adminId;

    private final Map<Long, Boolean> subscriptions = new HashMap<>();

    @PostConstruct
    public void postConstruct() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YogaBot...");
        System.out.println("Database URL: " + dbUrl);
        System.out.println("Bot Username: " + botUsername);
        initDb();
        System.out.println("‚úÖ YogaBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotPath() {
        return botPath;
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        System.out.println("üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " + update.getUpdateId());

        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String text = update.getMessage().getText();
            Long userId = update.getMessage().getFrom().getId();

            System.out.println("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + userId + ": " + text);

            switch (text) {
                case "/start" -> {
                    sendMsg(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø YogaBot üßò\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\nüìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
                }
                case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "/notifications" -> toggleSubscription(chatId, userId);
                case "üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "/schedule" -> showSchedule(chatId);
                default -> sendMsg(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/notifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
            }
        }
        return null;
    }

    private void sendMsg(Long chatId, String text) {
        SendMessage message = new SendMessage(chatId.toString(), text);
        try {
            execute(message);
            System.out.println("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void initDb() {
        System.out.println("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
        try (Connection conn = DriverManager.getConnection(dbUrl)) {
            Statement st = conn.createStatement();

            // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–Ω—è—Ç–∏–π
            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS lessons (
                    id BIGSERIAL PRIMARY KEY,
                    datetime TIMESTAMP NOT NULL,
                    title TEXT NOT NULL
                )
            """);

            // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS signups (
                    id BIGSERIAL PRIMARY KEY,
                    lesson_id BIGINT REFERENCES lessons(id) ON DELETE CASCADE,
                    username TEXT NOT NULL,
                    user_id BIGINT NOT NULL
                )
            """);

            // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            st.executeUpdate("""
                CREATE TABLE IF NOT EXISTS subscriptions (
                    id BIGSERIAL PRIMARY KEY,
                    user_id BIGINT UNIQUE NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
            ResultSet rs = st.executeQuery("SELECT COUNT(*) as count FROM lessons");
            rs.next();
            if (rs.getInt("count") == 0) {
                st.executeUpdate("""
                    INSERT INTO lessons (datetime, title) VALUES 
                    (CURRENT_TIMESTAMP + INTERVAL '1 day', '–£—Ç—Ä–µ–Ω–Ω—è—è –π–æ–≥–∞'),
                    (CURRENT_TIMESTAMP + INTERVAL '2 days', '–í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è'),
                    (CURRENT_TIMESTAMP + INTERVAL '3 days', '–•–∞—Ç—Ö–∞ –π–æ–≥–∞')
                """);
                System.out.println("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è");
            }

            System.out.println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void toggleSubscription(Long chatId, Long userId) {
        try (Connection conn = DriverManager.getConnection(dbUrl)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            PreparedStatement checkStmt = conn.prepareStatement(
                    "SELECT id FROM subscriptions WHERE user_id = ?"
            );
            checkStmt.setLong(1, userId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º
                PreparedStatement deleteStmt = conn.prepareStatement(
                        "DELETE FROM subscriptions WHERE user_id = ?"
                );
                deleteStmt.setLong(1, userId);
                deleteStmt.executeUpdate();
                sendMsg(chatId, "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã");
                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –æ—Ç–ø–∏—Å–∞–ª—Å—è");
            } else {
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
                PreparedStatement insertStmt = conn.prepareStatement(
                        "INSERT INTO subscriptions (user_id) VALUES (?)"
                );
                insertStmt.setLong(1, userId);
                insertStmt.executeUpdate();
                sendMsg(chatId, "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã");
                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –ø–æ–¥–ø–∏—Å–∞–ª—Å—è");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: " + e.getMessage());
            sendMsg(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏");
        }
    }

    private void showSchedule(Long chatId) {
        try (Connection conn = DriverManager.getConnection(dbUrl)) {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("""
                SELECT id, datetime, title 
                FROM lessons 
                WHERE datetime > CURRENT_TIMESTAMP 
                ORDER BY datetime 
                LIMIT 10
            """);

            StringBuilder sb = new StringBuilder("üìñ –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n\n");
            int count = 0;

            while (rs.next()) {
                count++;
                sb.append(count)
                        .append(". ")
                        .append(rs.getTimestamp("datetime").toLocalDateTime())
                        .append(" ‚Äî ")
                        .append(rs.getString("title"))
                        .append("\n");
            }

            if (count == 0) {
                sb.append("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.");
            }

            sendMsg(chatId, sb.toString());
            System.out.println("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ " + chatId);

        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: " + e.getMessage());
            sendMsg(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
        }
    }

    private boolean isAdmin(Long userId) {
        return adminId != null && adminId.equals(userId.toString());
    }
}